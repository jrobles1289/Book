<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>

    <title>Chapter 6: The Protocol Principle, A World Without Email</title>
    <meta content="urn:uuid:fdcd3175-275e-4545-9822-dd3618c31f20" name="Adept.expected.resource"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>

  


<link href="../../calibreHtmlOutBasicCss.css" type="text/css" rel="stylesheet" />

</head>
<body>

<div class="calibreMeta">
  <div class="calibreMetaTitle">
  
  
    
    <h1>
      <a href="../../../n6gwhr7i.html">A World Without Email: Reimagining Work in an Age of Communication Overload
</a>
    </h1>
    
    
  
  </div>
  <div class="calibreMetaAuthor">
    Cal Newport

  </div>
</div>

<div class="calibreMain">

  <div class="calibreEbookContent">
    
      <div class="calibreEbNavTop">
        
          <a href="14_Chapter_5_The_Process.xhtml" class="calibreAPrev">previous page
</a>
        

        
          <a href="16_Chapter_7_The_Special.xhtml" class="calibreANext">next page
</a>
        
      </div>
    

    
		<div class="calibre1">
			<h2 class="x03-chapter-number" id="_idParaDest-22"><span epub:type="pagebreak" id="page_179" role="doc-pagebreak" title="179" class="calibre4"></span>Chapter 6</h2>
			<h2 class="x03-chapter-title" id="_idParaDest-23">The Protocol Principle</h2>
			<h3 class="x05-head-a">The Invention of Information</h3>
			<p class="x03-co-body-text">Claude Shannon is one of the most important figures in twentieth-century science, yet few outside the specialized fields he helped innovate know his name. Perhaps his largest intellectual leap was his 1937 MIT master’s thesis, which he submitted at the age of twenty-one and, among other contributions, laid the foundation for all of digital electronics.<a href="19_Notes.xhtml#EndnoteNumber140" id="SuperscriptNumber140" class="calibre3"><sup class="endnote">1</sup></a> But it’s toward another of his most famous works that I’ll turn our attention now, as it will prove useful in our quest to move beyond the hyperactive hive mind workflow. I’m talking about Shannon’s invention of information.</p>
			<p class="x04-body-text">To be more precise, Shannon wasn’t the first person to talk carefully about information or to try to quantify it. But his 1948 paper, “A Mathematical Theory of Communication,” established a framework called <i class="calibre2">information theory</i> that fixed the flaws of earlier attempts to study this topic formally and provided the tools that ended up making <span epub:type="pagebreak" id="page_180" role="doc-pagebreak" title="180"></span>the modern digital communication revolution possible. Underlying this framework is a simple but profound idea: by adding complexity to the rules we use to structure our communication, the actual amount of information required by the interactions can be reduced. In this chapter, I’ll adapt this principle to workplace communication, arguing that by spending more time in advance setting up the rules by which we coordinate in the office (what I’ll call <i class="calibre2">protocols</i>), we can reduce the effort required to accomplish this coordination in the moment—allowing work to unfold much more efficiently. Before we elaborate this claim further, however, we must make a brief diversion to better understand Shannon’s transformative insight.<a href="19_Notes.xhtml#EndnoteNumber141" id="SuperscriptNumber141" class="calibre3"><sup class="endnote">2</sup></a></p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">Shannon developed his groundbreaking work on communication while he was a scientist at Bell Labs in the 1940s. Building on the earlier efforts of fellow Bell Labs scientist Ralph Hartley, Shannon began by stripping away any notion of the “meaning” conveyed by information. In his framework the challenge is more abstract. A sender wants to transmit a message from a set of possible messages to a receiver by sending symbols from a fixed alphabet over a channel. The goal is for the receiver to identify which message from the original set the sender had in mind. (Shannon also added the possibility of noise on the channel that can corrupt some of the symbols, but we’ll put that aside for now.) To keep things as clear as possible, Shannon further simplified the symbol alphabet to just two possibilities: a zero or a one. Putting this all together, in this framework, communication is reduced to the following game: a sender chooses a message from a well-known set of possible messages and transmits a sequence of zeros and ones over a channel monitored by the receiver, who then attempts to identify the message.</p>
			<p class="x04-body-text">Before Shannon, Ralph Hartley had already identified something <span epub:type="pagebreak" id="page_181" role="doc-pagebreak" title="181"></span>roughly like this setup as the right way to think about transmitting information. But Shannon added a twist: in many cases, a sender might be more likely to choose some messages than others, and this might help the sender communicate using fewer symbols on average. Imagine, for example, that a sender is transmitting letters from the English alphabet as part of a longer message. If the first two letters sent are “t” and “h,” then this severely restricts which letter is likely to be sent next. The probability, for example, that the sender will next transmit “x” or “q” or “z” is zero. But the probability that the sender is about to transmit “e” is quite high. (Like his better-known British counterpart in the pantheon of computing pioneers, Alan Turing, Shannon had done some work on code-breaking during World War II, and therefore would have been familiar with the idea that certain letters are more common than others.)</p>
			<p class="x04-body-text">Shannon argued that in this case, when the sender and receiver are trying to work out in advance the rules for how they will map transmitted symbols to letters, the <i class="calibre2">protocol</i><a href="19_Notes.xhtml#EndnoteNumber142" id="SuperscriptNumber142" class="calibre3"><sup class="endnote">3</sup></a> they come up with should take into account these varying likelihoods, as this might allow them, on average, to get away with using far fewer symbols to communicate.</p>
			<p class="x04-body-text">To make this idea more concrete, consider the following scenario. You’re in charge of monitoring a meter that measures some important piece of equipment. The meter has a dial with 256 different values that span from −127 to 128. The chief engineer wants an update on the meter reading every ten minutes. Because she works in a different building, you rig up a telegraph wire so that you can communicate this information using a binary code of dots and dashes, preventing you from having to go find her in person to deliver each report.</p>
			<p class="x04-body-text">For this scheme to work, you and the engineer must first agree on a protocol for how you’ll encode the meter readings. The simplest thing to do would be to map each of the 256 meter readings to a unique <span epub:type="pagebreak" id="page_182" role="doc-pagebreak" title="182"></span>sequence of dots and dashes. Perhaps, for example, a reading of −127 is transmitted as dot-dot-dot-dot-dot-dot-dot-dot, while a reading of 16 is transmitted as dash-dot-dash-dot-dot-dash-dash-dot, and so on. Some simple math (2<sup class="endnote">8</sup> = 256) tells us that there are exactly 256 different sequences of eight dots and dashes, so you’ll be able to assign a unique pattern to every possible meter reading.</p>
			<p class="x04-body-text">This protocol would require you to send eight telegraph symbols for each meter reading. But let’s say your goal is to minimize the number of symbols you have to send, as the telegraph key is annoying to use and hurts your hand. At this point, according to Shannon, you should take into account the likelihood of the different readings. In this scenario, let’s assume you know that the meter is almost always going to read zero, as this is the normal operating state of the machinery being monitored. If it reads something different, this means there’s a problem, and problems are relatively rare. To be more concrete, let’s say that you expect the meter to read zero 99 percent of the time.</p>
			<p class="x04-body-text">You and the engineer might now agree on the following more nuanced protocol. If you send a single dot, this means the reading is zero. If you send a dash, this means the reading is not zero and that you’ll follow this dash with an eight-symbol pattern that maps to the specific nonzero reading you’re measuring. Notice, with this new protocol, in the worst case you are sending <i class="calibre2">more</i> symbols than the simple protocol, as for a nonzero reading the new protocol requires nine symbols to be sent (the dash followed by an eight-symbol pattern), while the simple protocol always requires only eight symbols. But in the best case, the new protocol requires only one symbol, compared to eight for the simple alternative. How do you compare the costs of these two scenarios? Shannon suggests you use the specific probabilities to calculate an average cost. We calculate the average number of symbols per message in our new protocol like so: .99 × 1 + .01 × 9 = 1.08. In other words, if you <span epub:type="pagebreak" id="page_183" role="doc-pagebreak" title="183"></span>average the number of symbols you send per measurement over a long period of time, it will work out that you’re sending only slightly more than one symbol per message, making this new protocol massively more efficient over time than the original protocol.<a href="19_Notes.xhtml#EndnoteNumber143" id="SuperscriptNumber143" class="calibre3"><sup class="endnote">4</sup></a></p>
			<p class="x04-body-text">This was the central idea of Shannon’s information theory framework: clever protocols that take into account the structure of the information being communicated can perform <i class="calibre2">much</i> better than naïve approaches. (This wasn’t the only contribution of information theory. Shannon’s paper also showed how to calculate the best possible performance for a given information source and revolutionized the way engineers thought about reducing interference from noise, making both high-speed electronic communication and dense digital storage possible.<a href="19_Notes.xhtml#EndnoteNumber144" id="SuperscriptNumber144" class="calibre3"><sup class="endnote">5</sup></a>) Without these insights, something as routine as downloading a movie from iTunes might take multiple days instead of a handful of minutes, and the images making up your Instagram feed might require an hour to appear instead of just the seconds we’ve come to expect.</p>
			<p class="x04-body-text">These same ideas apply beyond digital communication. Soon after Shannon’s seminal 1948 paper began to spread, engineers and scientists in a variety of fields recognized the general usefulness of his framework. Information theory began popping up in many contexts far separated from the world of digital files and computer networking, from linguistics, to human vision, to the understanding of life itself (biologists realized that DNA can be understood as an efficient, Shannon-style information protocol). We will now add one more area where Shannon’s framework provides insight: coordination in the office.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">In a standard work scenario, various parties need to communicate with one another about various issues—agreeing on a time for a meeting, determining the next step for a joint project, answering a client question, <span epub:type="pagebreak" id="page_184" role="doc-pagebreak" title="184"></span>providing feedback on an idea. These coordination activities are structured by rules. Often these rules are implicit, in that they capture norms that aren’t written down anywhere, and sometimes they’re more formal. Consider, for example, a small consulting firm that regularly receives requests from potential clients that need to be evaluated to determine which are worth pursuing as new business. If the firm embraces the hyperactive hive mind workflow, then their implicit rule for deciding how to respond to these requests is likely to just initiate an email conversation among the relevant team members and hope to eventually arrive at a conclusion. A more formal rule, by contrast, might be to hold a meeting every Friday morning to go through that week’s requests as a group and decide right then which ones to pursue and who will take the lead. Whether implicit or formal, many office activities are structured by some manner of rules. In honor of Shannon, let’s call these collections of rules <i class="calibre2">coordination protocols.</i></p>
			<p class="x04-body-text">Shannon’s information theory framework teaches us that for a given task, the protocol you choose matters, as some are costlier than others. In classical information theory, the <i class="calibre2">cost</i> of a given protocol is the average number of bits you need to transmit to complete the task—as with our simple meter reading example from above, a protocol that uses fewer bits on average is better than one that uses more. When evaluating coordination protocols in the workplace, however, we’ll need some more nuanced notions of <i class="calibre2">cost.</i></p>
			<p class="x04-body-text">We might measure cost, for example, in terms of <i class="calibre2">cognitive cycles</i>, which describes the degree to which a protocol fragments your attention. To be even more precise, we can follow the lead of the RescueTime researchers discussed in part 1 and divide the workday into five-minute buckets. To measure the cognitive cycle cost of a particular coordination protocol, we count the number of these buckets in which at least some effort was expended toward the coordination task. To stick with <span epub:type="pagebreak" id="page_185" role="doc-pagebreak" title="185"></span>our consulting firm scenario, the hyperactive hive mind protocol for evaluating new client requests probably generates several dozen back-and-forth emails, with each message corrupting a different five-minute bucket, creating a large overall cognitive cycle cost. The meeting protocol, by contrast, requires only one meeting per week. Assuming these meetings last something like thirty minutes, then the protocol corrupts only six or so of these buckets per week, making it much less costly by this measure.</p>
			<p class="x04-body-text">Another relevant cost when considering workplace coordination protocols is <i class="calibre2">inconvenience.</i> If a protocol induces a long delay for someone to receive critical information, or requires extra effort on the part of the sender or receiver, or leads to a missed opportunity, then this generates inconvenience. For the sake of this thought experiment, let’s imagine we have some sort of numerical scale for measuring inconvenience (actual numbers don’t really matter here). Returning to our consulting firm example, the hive mind protocol probably scores better on this inconvenience scale compared with the weekly meeting protocol, as the need to wait for the next meeting before responding to a potential client might be perceived as an inconsiderately long delay. In some cases, this might even lead to lost business.</p>
			<p class="x04-body-text">Shannon teaches us that we need to pay careful attention to these costs and be willing to tinker with our protocols to find ways to balance them optimally. In our scenario, the high cognitive cycle cost of the hive mind protocol for dealing with client requests seems prohibitive, even though it scores well on inconvenience. We might instead turn to the weekly meeting protocol, which scores well on cognitive cycle cost, and seek ways to reduce its inconvenience. Perhaps, for example, we introduce the following standard operating procedure: when a new client request arrives, whoever is in charge of monitoring that inbox immediately sends a reply to the potential client thanking them for their <span epub:type="pagebreak" id="page_186" role="doc-pagebreak" title="186"></span>interest and promising a response within a week—reducing the probability that the client ends up annoyed by the delay. It’s still possible that a potential client could be turned off by this response, but given the timely initial reply and clear expectations, this worst-case scenario is made rare. This approach slightly increases the cognitive cycle cost, as now someone has to send a quick reply to each incoming message, but this cost remains muted compared with what’s generated by the hive mind protocol, which initiates an extensive thread for each new potential client. On average, this hybrid protocol seems like it has a lower cost than either of the alternatives and is probably therefore the right choice for the consulting firm.</p>
			<p class="x04-body-text">Our instinct in the knowledge work setting is to obsess about factors like worst-case scenarios—<i class="calibre2">how can we prevent bad things from ever happening?!</i>—or to prefer the convenience of simple (but costly) protocols to more finicky (but optimized) alternatives. The information theory revolution tells us that these instincts shouldn’t be trusted. Take the time to build the protocol that has the best average cost, even if it’s not the most natural option in the moment, as the long-term performance gains can be substantial.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">We’re now ready to pull together these various pieces to articulate the central principle we’ll explore in this chapter. A key element of any workflow is the means by which people coordinate their work. This coordination requires communication, and whether or not you use this terminology, this in turn requires the people involved to agree in advance on a set of rules about how and when the communication occurs—what we call a coordination protocol.</p>
			<p class="x04-body-text">Most organizations default to using a hyperactive hive mind–style <span epub:type="pagebreak" id="page_187" role="doc-pagebreak" title="187"></span>protocol for most coordination activities, because it’s simple to set up and persuade people to follow. Its flexibility also often allows organizations to avoid worst-case scenarios. Shannon teaches us, however, that if you’re willing to put in the hard work up front to develop smarter protocols for these tasks, you can often drastically reduce their long-term cost. The hard work you invest in advance to deploy the optimized protocol will pay off many times over in the lower cost you experience as you subsequently use it. Formally:</p>
			<aside class="sidebar">
				<div class="w10r-email">
					<img alt="" class="w1" src="../images/page_230.jpg"/>
				</div>
				<h3 class="x10-sidebar-title">The Protocol Principle</h3>
				<p class="x10-sidebar-text-last">Designing rules that optimize when and how coordination occurs in the workplace is a pain in the short term but can result in significantly more productive operation in the long term.</p>
				<div class="clear"></div>
			</aside>
			<p class="x04-body-text">The remainder of this chapter explores case studies of the protocol principle in action. You’ll learn about the usefulness of corporate office hours and how restricting clients’ access to you can make them happier. You’ll also learn what happened when an academic research group began running structured daily status meetings like a software development team, and you’ll hear an argument for why you should never again try to schedule a meeting over email. All these protocols are more complex than just rocking and rolling with your email inbox or Slack channel, and some make it more likely that the occasional bad thing will happen. But guided by Shannon’s fundamental insight, they embrace the central idea that sometimes a little extra complexity can unlock a lot more performance.</p>
			<h3 class="x05-head-a"><span epub:type="pagebreak" id="page_188" role="doc-pagebreak" title="188" class="calibre4"></span>Meeting Scheduling Protocols</h3>
			<p class="x03-co-body-text">In 2016, I spoke on a panel at a business event. One of my fellow panelists was a New York–based technology entrepreneur named Dennis Mortensen. As I learned when we later chatted, he was the CEO of a start-up that was in the process of leaving stealth mode and taking on beta testers. It was called x.ai, and its product deployed cutting-edge artificial intelligence technology to tackle a mundane task: scheduling meetings.</p>
			<p class="x04-body-text">In its original iteration, x.ai implemented a digital agent named Amy. When you needed to schedule a meeting with someone over email, you would cc a special email address connected to Amy and then, in natural text, ask the agent to help set up the gathering. For example, you might write: “Amy, can you set up a meeting for me and Bob next Wednesday?” At this point—and this is where the magic happens—Amy would interact with Bob over email to find a time on Wednesday that worked for both his and your schedules, then add the event to your calendar. This might sound like a minor improvement to office life, but it attracted major investment. By 2016, when I met Mortensen, x.ai had already spent more than $26 million of investment capital on the Amy natural language interface. By 2018, they had received $40 million in total investments.<a href="19_Notes.xhtml#EndnoteNumber145" id="SuperscriptNumber145" class="calibre3"><sup class="endnote">6</sup></a></p>
			<p class="x04-body-text">There’s a reason why automated meeting-scheduling companies like x.ai are receiving so much attention from investors: even the most die-hard hyperactive hive mind booster can’t ignore the raw time-wasting inefficiency of the way most knowledge workers currently tackle this increasingly common task. The standard protocol for setting up meetings is what I call <i class="calibre2">energy-minimizing email ping-pong.</i> At some point during an email conversation it becomes clear that a meeting is needed. Because this task is annoying and non-urgent, all participants <span epub:type="pagebreak" id="page_189" role="doc-pagebreak" title="189"></span>involved initiate a game whose unspoken rule is to see how quickly you can bounce the responsibility for the scheduling to someone else, even if just temporarily:</p>
			<blockquote class="calibre6">
				<p class="x06-e-mail-salutation">“We should meet. Let me know when works for you.”</p>
				<p class="x06-e-mail">“Should we shoot for next week?”</p>
				<p class="x06-e-mail">“Sounds good to me. Generally speaking, Tuesday and Thursday are probably best.”</p>
				<p class="x06-e-mail">“I’m sort of swamped those days. Friday?”</p>
				<p class="x06-e-mail">“Sure, when?”</p>
				<p class="x06-e-mail">“Morning?”</p>
				<p class="x06-e-mail">“Maybe I could do 11:00 if not too late?”</p>
				<p class="x06-e-mail">“I leave for an off-site meeting around then. How does the following week look?”</p>
				<p class="x06-e-mail-closing"><i class="calibre2">And so on . . . </i></p>
			</blockquote>
			<p class="x04-body-text">The cognitive cost of this protocol is large, as each one of these back-and-forth messages requires time spent in your inbox. To make matters worse, once a scheduling conversation is in progress, you have to check your inbox frequently while waiting for the next message to arrive, as it would be impolite to disappear for many hours in the middle of one of these quasi-synchronous back-and-forth interactions.</p>
			<p class="x04-body-text">It would be bad enough if you had just one such meeting to schedule at any given time, but in reality, most knowledge workers find themselves juggling many different scheduling conversations simultaneously. <span epub:type="pagebreak" id="page_190" role="doc-pagebreak" title="190"></span>As reported in a 2017 <i class="calibre2">Harvard Business Review</i> article, dramatically titled “Stop the Meeting Madness,” the average executive now spends twenty-three hours a week in meetings.<a href="19_Notes.xhtml#EndnoteNumber146" id="SuperscriptNumber146" class="calibre3"><sup class="endnote">7</sup></a> The sheer volume of the scheduling required to set up those meetings becomes a major driver of hyperactive inbox checking, and therefore induces a major cognitive cost. When you have to continually return to your inbox to nudge along one of many different meeting-scheduling conversations, your ability to perform valuable cognitive work significantly diminishes. This is why investors are willing to spend $40 million to see whether artificial intelligence might drastically reduce this cognitive cost—this price is small compared with the massive amount of productivity that would be unlocked if the knowledge sector could abandon energy-minimizing email ping-pong altogether.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">When seeking better meeting-scheduling protocols, there are several solutions that are significantly less costly on average than ad hoc emailing. The first, and most extreme, is to hire an actual flesh-and-blood assistant who has access to your calendar and can schedule meetings on your behalf. There was a time when this option was prohibitively expensive for all but the highest-level executives, as it involved paying a full-time salary to a dedicated employee. This is no longer the case. Online freelance services have made it simple to hire assistants to work remotely for a limited number of hours on specific tasks. When I hired my first part-time virtual assistant, using a service called Upwork, I was surprised to discover that she could easily handle my meeting scheduling in no more than two to three billable hours a week. The real cost of meeting scheduling comes from the numerous interruptions required to check your inbox and keep the conversations moving, but all these <span epub:type="pagebreak" id="page_191" role="doc-pagebreak" title="191"></span>costly interruptions don’t actually add up to a large total amount of billable time when handed off to an assistant.<a href="19_Notes.xhtml#EndnoteNumber147" id="SuperscriptNumber147" class="calibre3"><sup class="endnote">8</sup></a></p>
			<p class="x04-body-text">Though hourly rates differ depending on the experience of the assistant, given the reality of how much time is actually involved in scheduling, it shouldn’t be difficult to off-load the bulk of your meeting scheduling for around forty dollars a week on average. An extra $160 a month, of course, is a nontrivial amount of money. In my experience, the type of knowledge workers most likely to make this investment are entrepreneurs who are already used to investing money in themselves and their businesses to keep things growing. For those who work as employees for large organizations, on the other hand, the idea of trading your own money for increased productivity is more foreign, and in this context bringing in an outside assistant to interact with your colleagues might be viewed with suspicion, if not outright hostility. That’s why in my professional life, I use my assistant to manage the overwhelming number of meeting and interview requests I receive in my writing business, not, for the most part, to deal with the demands of my other job as a university professor.</p>
			<p class="x04-body-text">Successfully working with a part-time assistant to schedule meetings requires two things: access to your availability and a way to add new events to your calendar. There are many tools that can satisfy these requirements. I’ve been using an online scheduling service called Acuity. At the beginning of each semester in which I’ve hired an assistant, I’ll manually enter into the system all the times I’m available for meetings in the months ahead. When my assistant needs to schedule a meeting, she uses Acuity to select a block within these available times. What makes this service useful is that it synchronizes with my Google Calendar. When my assistant books an appointment in Acuity, it shows up automatically on my calendar. Equally important, if I directly book <span epub:type="pagebreak" id="page_192" role="doc-pagebreak" title="192"></span>something on my calendar, Acuity automatically removes that block of time from my availability.</p>
			<p class="x04-body-text">The obvious question, of course, is why I don’t just directly use Acuity to accelerate my meeting booking: if someone wants to meet with me, instead of passing them off to my assistant, I could just send them straight to Acuity to book a meeting time that works for both of us. The reason I don’t default to this simpler and cheaper option is that I work with a diverse set of possible appointments, and they’re not all created equal from a scheduling perspective. When booking a meeting that will be held in my Georgetown office, for example, I want to consider only times when I’m on campus. When booking a podcast interview, by contrast, I want to do the opposite, offering only times when I’m working from home and can make use of my in-home studio. Some meetings are urgent, and I want to find the nearest available time slot, while others are not, and I want to defer them to a less crowded period in the future. It wouldn’t work for me to respond to each meeting request with a list of <i class="calibre2">all</i> times that I’m available; I can instead let my assistant navigate these different demands.</p>
			<p class="x04-body-text">For most knowledge work jobs, however, these types of distinctions are less relevant. You have a standard workweek during which you block off some times for uninterrupted work, leaving the rest open for meetings and appointments. In this case, there really isn’t a need for an actual human to help you with your scheduling. Tools such as Acuity, ScheduleOnce, Calendly, and, of course, x.ai (to name a few examples among many) make it easy for other people to set up meetings with you during times when you’re available. When someone requests a meeting, you simply send them a link to your scheduling service and tell them to pick whatever time works best for them. Days of energy-minimizing email ping-pong have now <span epub:type="pagebreak" id="page_193" role="doc-pagebreak" title="193"></span>been reduced to a single message and some clicking on a scheduling website.</p>
			<p class="x04-body-text">If the meeting involves multiple people, then avoiding email ping-pong becomes even more urgent, as the number of messages required for scheduling often increases exponentially with the number of attendees. In these cases, it’s worth using a group polling service like Doodle. For those who are unfamiliar, these services require you to set up an online poll by entering in multiple date and time options that work well for your calendar. You then send the poll to the other meeting participants, who each check off which of these times work for them, allowing you to easily identify a time that works for everyone.</p>
			<p class="x04-body-text">I would go so far as to say that anyone whose job requires more than one or two scheduled events in a typical week absolutely should be using a scheduling service or, if the work demands it, a part-time assistant. There’s really no reason why anyone should still have to waste cognitive cycles in dragged-out scheduling conversations. You might think that the gains here are small—<i class="calibre2">how hard is it to send some emails?</i>—but if you’re like me, you’ll likely be surprised by the feeling of a burden being lifted when you eliminate all these ongoing scheduling conversations, which have a way of nibbling at the borders of your concentration, driving you again and again back into the hive mind chatter.</p>
			<p class="x04-body-text">Claude Shannon’s framework underscores this reality. Meeting-scheduling protocols induce a small extra inconvenience cost, as you have to set up the system, and your correspondents now have to select times from a website instead of simply shooting back a short email reply in the moment. But the cognitive cycles saved are so substantial that there’s no comparison: the average cost of these meeting-scheduling protocols is significantly lower than what’s required by the status quo of energy-minimizing email ping-pong.</p>
			<h3 class="x05-head-a"><span epub:type="pagebreak" id="page_194" role="doc-pagebreak" title="194" class="calibre4"></span>Office Hour Protocols</h3>
			<p class="x03-co-body-text">In early 2016, I published an article on the <i class="calibre2">Harvard Business Review</i>’s website that I gave a purposefully provocative title, “A Modest Proposal: Eliminate Email.” Though I’d been writing about the unique miseries of this technology on my blog, this piece was one of my first mainstream essays on the ideas that would eventually coalesce into the book you’re currently reading. At the halfway point of the article, after I’d reviewed the issues caused by the hyperactive hive mind workflow, I delivered my big conclusion: “There’s great advantage for those organizations willing to end the reign of the unstructured workflow and replace it with something designed from scratch with the specific goal of maximizing value production and employee satisfaction.”<a href="19_Notes.xhtml#EndnoteNumber148" id="SuperscriptNumber148" class="calibre3"><sup class="endnote">9</sup></a></p>
			<p class="x04-body-text">In my original draft, I was happy to leave the argument there. My editor didn’t agree. He rightly pointed out that the idea of abandoning email was so novel that there had to be at least some suggestions about how an organization might function in its absence. I hadn’t yet worked out the details of attention capital theory at this early point in my thinking, so I didn’t have a ready answer to my editor’s question of what replaces email. Grasping for an example, I found inspiration in an activity common in my own world of academia: office hours. As I elaborated:</p>
			<blockquote class="calibre6">
				<p class="x06-extract-1p">The concept is simple. Employees no longer have personalized email addresses. Instead, each individual posts a schedule of two or three stretches of time during the day when he or she will be available for communication. During these <i class="calibre2">office hours</i>, the individual guarantees to be reachable in person, by phone, and by instant messenger technologies like Slack. Outside of someone’s stated office hours, however, you cannot command their <span epub:type="pagebreak" id="page_195" role="doc-pagebreak" title="195"></span>attention. If you need them, you have to keep track of what you need until they’re next available.</p>
			</blockquote>
			<p class="x04-body-text">Much to my disappointment, this 2016 article didn’t immediately spark an anti-email revolution. One commenter pointed out, correctly, that office hours would be a poor fit for organizations with employees that spanned multiple time zones. Another wrote that they’d rather have more email than more meetings. “To attempt to outlaw email now is like trying to bolt the barn door after the horse has bolted,” concluded another commenter. “It’s just not gonna work.” As my research on email continued, I pushed the office hours concept to the periphery of my thinking. As I later learned, however, I perhaps shouldn’t have been so hasty in dismissing this solution.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">Let’s jump ahead to 2018, when Jason Fried and David Heinemeier Hansson, the iconoclastic cofounders of the software company Basecamp, published a book titled <i class="calibre2">It Doesn’t Have to Be Crazy at Work.</i><a href="19_Notes.xhtml#EndnoteNumber149" id="SuperscriptNumber149" class="calibre3"><sup class="endnote">10</sup></a> The book describes a collection of ideas for cultivating an effective workplace culture they call “the calm company,” and nestled among its suggestions is a familiar strategy: office hours. As Fried and Hansson note, their company contains many subject matter experts: “people who can answer questions about statistics, JavaScript event handling, database tipping points.” Accordingly, if one of their employees has a question about one of these topics, they can simply “ping” the expert to get an answer. Fried and Hansson have mixed feelings about this reality: “[It’s] wonderful. And terrible.”<a href="19_Notes.xhtml#EndnoteNumber150" id="SuperscriptNumber150" class="calibre3"><sup class="endnote">11</sup></a></p>
			<p class="x04-body-text">The wonderful aspect is that these experts can help their coworkers become unstuck or identify more effective solutions to their problems. The terrible aspect, on the other hand, is that the experts get sucked <span epub:type="pagebreak" id="page_196" role="doc-pagebreak" title="196"></span>into the hyperactive hive mind—devoting more and more slivers of time throughout the day to fielding these ad hoc requests. Basecamp’s solution, to my delight, was to introduce office hours. The experts now publish set hours each week during which they’re available to answer questions. For some experts, these office hours might be sparse, such as one hour per week, while for others they might be frequent, such as one hour every day. The company trusts the experts to figure out the availability that best matches their demand. Questions for these experts are then confined to those set office hours.</p>
			<p class="x04-body-text">“But what if you have a question on Monday and someone’s office hours aren’t until Thursday?” Fried and Hansson ask. They provide a blunt answer: “You wait, that’s what you do.” They note that these constraints might seem overly bureaucratic at first, but that they’ve ended up a “big hit” at their company. “It turns out that waiting is no big deal most of the time,” they elaborate. “But the time and control regained by our experts is a huge deal.”<a href="19_Notes.xhtml#EndnoteNumber151" id="SuperscriptNumber151" class="calibre3"><sup class="endnote">12</sup></a></p>
			<p class="x04-body-text">Further investigation reveals that Basecamp is not the only non-academic organization to deploy office hours in a limited manner. As I learned from Scott Kirsner, the Innovation Economy columnist for <i class="calibre2">The</i> <i class="calibre2">Boston Globe</i>, office hours have long been popular among venture capitalists. As he explains in a column titled “I’m Joining the Open Office Hours Movement,” many Boston-area investment groups, including Flybridge, Spark Capital, and Polaris Partners, have taken to putting aside regular times each week in which anyone interested in technology start-ups can show up, “no strings attached,” to ask for advice, pitch an idea, or just make a connection.<a href="19_Notes.xhtml#EndnoteNumber152" id="SuperscriptNumber152" class="calibre3"><sup class="endnote">13</sup></a> As I learned profiling a Silicon Valley–based venture capitalist named Mike Jackson for my 2012 book, <i class="calibre2">So Good They Can’t Ignore You</i>, success in this industry depends on exposing yourself to lots of different ideas and people, but if this exposure is delivered through unsolicited email messages, you can accidentally drown <span epub:type="pagebreak" id="page_197" role="doc-pagebreak" title="197"></span>trying to keep up. “It’s so easy to just come in and spend your whole day on email,” he warned.<a href="19_Notes.xhtml#EndnoteNumber153" id="SuperscriptNumber153" class="calibre3"><sup class="endnote">14</sup></a> Office hours proved a good way for investors to balance these competing forces.</p>
			<p class="x04-body-text">Claude Shannon’s framework helps explain why these examples work so well. For most types of coordination, moving to predetermined office hours will significantly reduce the cognitive cycle cost compared with simply bouncing messages back and forth in an ad hoc fashion. Having to wait until the next scheduled office hour to communicate, however, can induce an inconvenience cost. Office hour protocols seem to work best for activities that are not too negatively impacted by these delays. This is why Basecamp’s experts and Boston’s venture capitalists embraced office hours: they reduced the large cognitive cost of distracting messages while introducing delays that didn’t yield any major impact on daily effectiveness. This is also why my 2016 suggestion of replacing <i class="calibre2">all</i> communication with office hours landed with a thud: there are many types of coordination currently handled over email for which long delays <i class="calibre2">would</i> be prohibitively costly. The conclusion is that any time you find yourself involved in a type of coordination activity that’s both frequent and non-urgent, an office hour protocol might significantly reduce its cost.</p>
			<h3 class="x05-head-a">Client Protocols</h3>
			<p class="x03-co-body-text">In the late 1990s, as a teenager caught up in the excitement of the first dot-com boom, I cofounded a technology company with my friend Michael Simmons. Because we lived near Princeton, New Jersey, and thought this was a prestigious-sounding address, we named the firm Princeton Web Solutions.<a href="19_Notes.xhtml#EndnoteNumber154" id="SuperscriptNumber154" class="calibre3"><sup class="endnote">15</sup></a> We focused on website design, starting off by hand-coding sites for small businesses in the area. At some point, however, Michael connected online with a group of freelance <span epub:type="pagebreak" id="page_198" role="doc-pagebreak" title="198"></span>developers based in India. We soon realized two key points. First, this team was much better at web development than we were, and second, their rates were quite low by American standards at the time. We struck a deal in which we would find clients and manage the projects while the Indian team would do the actual graphic design and HTML coding. In my memory, our first contracts were around $1,000. With the new team on board, we began landing contracts in the $15,000 to $40,000 range. The problem with all this, of course, was that we were teenagers living in the 1990s, meaning that we were in school all day and didn’t have cell phones. As a result, we were running large contracts for demanding clients who basically had no way to get in touch with us.</p>
			<p class="x04-body-text">Our solution to this problem was to code up an elaborate client portal. Each client had their own username and password they could use to log in to the portal. Once inside, they were presented with detailed information about their project. Sample designs and pre-launch versions of their site were all available for review in the portal, as was a calendar that listed the major upcoming milestones. A “work diary” contained daily updates on what work had been completed that day. Most actual interaction about the projects was condensed to specific meetings that were connected to our detailed project process. Each of these meetings generated a corresponding memo outlining what we’d decided, which we asked the clients to sign, indicating that they approved. (We found that this minimized the chances that the client would later change their mind once development was underway.) Scans of these signed memos could be downloaded through the portal.</p>
			<p class="x04-body-text">We never directly explained to our clients that we relied on our portal because we were in school all day—though I have to imagine they figured this out on their own—we just set things up so that this reality wouldn’t be an issue. Designers today often complain about how <span epub:type="pagebreak" id="page_199" role="doc-pagebreak" title="199"></span>much time they spend dealing with emails. We were doing more or less the same work back then, but did so with basically no emails at all.</p>
			<p class="x04-body-text">Of course, we weren’t unique in our commitment to becoming clever about client communications. Back in chapter 1, I told the story of Sean overhauling the workflow at his small technology start-up. In this story, it was overwhelming client communication, more than anything else, that drove him to a breaking point. For Sean, things really began to unravel when a particularly demanding client asked to be given access to their internal Slack setup—causing the pings of Slack notifications to become a constant background hum, with each message carrying yet another anxiety-producing demand from the client. Not surprisingly, when Sean finally decided to replace the hyperactive hive mind at the company with better practices, one of the main areas where he focused was how they interacted with their clients.</p>
			<p class="x04-body-text">Sean’s company began adding a section titled “Communication” to every statement of work. “We want the client to be aware of all of this at the front of the project,” he told me. The new section specified the rules for communication between the client and the company, including, as Sean emphasized to me, what to do when urgent matters arose. In most cases, the standard setup was a prescheduled weekly conference call with the client, after which a written summary of the call was sent to the client. Sean’s business partner, who was in charge of client relations, was anxious about this change. “He was worried the clients would not be happy about this because we are a user experience company, so the experience has to be top-notch,” Sean explained. “But they are absolutely much happier. It’s all about managing expectations.”</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">Though we didn’t use this terminology, both Sean and my high school company deployed improved communication protocols to handle <span epub:type="pagebreak" id="page_200" role="doc-pagebreak" title="200"></span>interactions between our organizations and our clients. By doing so, we significantly decreased the average cost of this coordination. Having studied other examples of these client protocols, I’ve identified a few useful pointers for helping these efforts succeed.</p>
			<p class="x04-body-text">First, when seeking to minimize costs, consider the client’s cost in addition to your own. A key factor that helps a client protocol work is if it reduces the cognitive cycles or inconveniences that the <i class="calibre2">client</i> faces as well. Few clients actually like sending you endless messages. They often instead feel forced into this behavior because they don’t know how else to get in touch or make sure work is being done. As I learned with Princeton Web Solutions, the structured nature of our portal didn’t frustrate clients; it instead gave them peace of mind, as they didn’t have to waste cognitive energy worrying about our contract. By contrast, if you come up with a communication scheme that makes your experience easier while simultaneously making the client’s experience costlier—to provide an extreme example: forcing them to fax you detailed client request forms every time they need something—you’ll have a much harder sell on your hands, and for good reason.</p>
			<p class="x04-body-text">Another important point is the need for clarity. Sean’s company included a detailed description of their client protocol in the statement of work all their clients signed. This was smart. If they had instead just casually suggested to their clients that a weekly call should work, the clients would have been much more likely to default to the hive mind as soon as the first minor inconvenience arose. When the language is contractual, however, the client is more likely to just suffer the minor inconvenience and learn over time how much they actually enjoy the lower average cost of a more constrained system.</p>
			<p class="x04-body-text">Finally, despite your best efforts, there will always be some clients for which these types of protocols just won’t work. I talked with a communication consultant who used to work at a twelve-person shop in <span epub:type="pagebreak" id="page_201" role="doc-pagebreak" title="201"></span>Washington, DC. She told me that for many of their clients, they used a variation of Sean’s setup: a scheduled weekly call followed by a written summary of all the points discussed. For some of their clients, however, they offered crisis communication services. These clients needed a way of getting <i class="calibre2">immediate</i> attention when publicity crises occurred, so their protocol essentially simplified to “call right away if anything happens.” The details of these protocols, in other words, can depend on the specific type of work.</p>
			<p class="x04-body-text">There are also certain individuals for whom this approach won’t apply, not because of the nature of their work but because of their personalities. To use the technical term, I’m talking about jerks who enjoy badgering people because it makes them feel important. Tim Ferriss wrote about this exact situation in his 2007 bestseller, <i class="calibre2">The 4-Hour Workweek.</i> In discussing how he upgraded the workflows of his supplement company, BrainQuicken, he talked about how he ended up “firing” one of his more stress-inducing and belligerent clients. This idea that you might fire toxic clients struck a nerve. “That passage just leapt off the page for me,” explained Tobi Lütke, the CEO of the tech company Shopify, in a Ferriss profile appearing in <i class="calibre2">Inc.</i> magazine. “If you go into business school and suggest firing a customer, they’ll kick you out of the building. But it’s so true in my experience. It allows you to identify the customers you really want to work with.”<a href="19_Notes.xhtml#EndnoteNumber155" id="SuperscriptNumber155" class="calibre3"><sup class="endnote">16</sup></a> Claude Shannon’s framework helps validate the logic of this client-firing strategy. While it’s true that you’ll lose money in the short term, you’ll also eliminate significant cognitive costs. Once you start treating the latter more seriously, it becomes easier to move on from clients whose costs to your psyche don’t justify the improvements to your immediate bottom line.</p>
			<p class="x04-body-text">Pulling together these pieces, it should be clear that if you deal with clients, an optimized client communication protocol will be crucial in your journey to move past the hyperactive hive mind workflow.</p>
			<h3 class="x05-head-a"><span epub:type="pagebreak" id="page_202" role="doc-pagebreak" title="202" class="calibre4"></span>Nonpersonal Email Protocols</h3>
			<p class="x03-co-body-text">Some aspects of our daily lives become so familiar that we have a hard time imagining an alternative ever existing. One such example of this effect is the canonical format of email addresses: person@organization. There’s an elegance to this structure. When you send an email, the underlying email protocol routes the message to the organization specified in the address. Once there, the organization’s email server delivers the message to the specific recipient on the left side of the @ symbol. It’s this element of the email address, the recipient field, that we take for granted. But if we step back and examine it from a fresh perspective, an intriguing question emerges: Why are the recipients in email addresses almost always <i class="calibre2">people</i>, and not, for example, departments, projects, or activities?</p>
			<p class="x04-body-text">The historical answer to this question can be traced to one of the earliest proto-email systems. In the early 1960s, computers were still large and expensive mainframes that required dedicated rooms and maintenance staffs. To use these machines meant waiting your turn, at which point you would temporarily be given full control of the digital behemoth, hoping it would compute your program, likely inputted as punch cards, before your turn expired. Engineers at MIT, frustrated by this setup, figured there must be a better way to divvy up mainframe access. Their solution, launched in the MIT Computation Center in 1961, was called the Compatible Time-Sharing System (CTSS). And it introduced something revolutionary into the world of computing: the ability for multiple users to log in to the same mainframe at the same time using terminal machines hardwired to the mainframe. These users weren’t literally controlling the computer simultaneously; instead, the time-sharing operating system running on the big machine would switch rapidly between the different users, doing a little computation for one <span epub:type="pagebreak" id="page_203" role="doc-pagebreak" title="203"></span>user before switching over to do some computation for another, and so on. But from the perspective of the users, it truly felt to each as if they had the mainframe all to themselves.</p>
			<p class="x04-body-text">The jump from CTSS to email was natural. One of the features time-sharing introduced was the idea that each user account had its own directory containing its own files, some private and some accessible to everyone else on the system. Clever early users of CTSS realized they could leave messages in one another’s directories. By 1965, this behavior was standardized with the MAIL command, implemented by software engineers Tom Van Vleck and Noel Morris. It placed a file called “MAIL BOX” in each user’s directory. When you sent a message to a specific user with the MAIL command, the note was appended to that user’s MAIL BOX file. People could use the tool to read and delete messages in their own MAIL BOX files.</p>
			<p class="x04-body-text">The very earliest email accounts were associated with individual people, in other words, because the user accounts for mainframe time-sharing systems were originally set up in this way. Once this connection was made, it stuck. Ray Tomlinson, the engineer perhaps most responsible for the person@organization address format that later became standard, had previously worked on more advanced versions of time-sharing messaging tools like MAIL.<a href="19_Notes.xhtml#EndnoteNumber156" id="SuperscriptNumber156" class="calibre3"><sup class="endnote">17</sup></a></p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">This arbitrary and seemingly innocent decision to associate email with individuals ended up playing a role in the rise of the hyperactive hive mind workflow. As argued in part 1 of this book, the hive mind scales up the natural way we have always coordinated in small groups: unstructured, ad hoc, back-and-forth chatter. Because email addresses are associated with people, it was easy to deploy this tool to support this type of conversation, starting us down the slippery slope that eventually <span epub:type="pagebreak" id="page_204" role="doc-pagebreak" title="204"></span>led to uncontrolled messaging. In an alternative universe where email addresses were instead tied to projects or teams, the hive mind workflow might have felt much less natural, and therefore might have had a harder time gaining traction.</p>
			<p class="x04-body-text">The point of detailing this history is to encourage you to consider breaking the convention of associating email addresses with individuals, especially when seeking out efficient communication protocols. By eliminating this connection between email and people, you will, with one grand gesture, destabilize everyone’s expectations about how communication <i class="calibre2">should</i> unfold, making it much easier for you to rebuild these expectations from scratch with a protocol that makes more sense.</p>
			<p class="x04-body-text">Consider, for example, the client communication protocols discussed in this chapter. When a client is used to contacting a specific individual in your organization when they have questions or issues, it might be hard to diminish their expectation of quick responses. They will personalize these interactions and begin treating delays as a personal affront (<i class="calibre2">why are you ignoring me?!</i>). Now imagine instead that each client is assigned a dedicated email address of the form clientname@yourorganization.com<i class="calibre2">.</i> It’s now much easier to break them from the idea that their messages are going to an individual person, who is seeing them right away and therefore better answer them quickly! By depersonalizing communication, you have many more options to optimize it.</p>
			<p class="x04-body-text">I deployed protocols based on these ideas to help manage my author communication. When I used to offer only a single email address for readers to reach me, associated with my name, the messages became overwhelming: not in just their volume but also their complexity. When you think you’re interacting with an individual, it’s natural to assume that they’ll be reasonable enough to read your long story and offer detailed advice, or set up a call to talk about your business opportunity, <span epub:type="pagebreak" id="page_205" role="doc-pagebreak" title="205"></span>or connect you to relevant people in their network. I used to do this gladly, but as my audience grew it became more difficult.</p>
			<p class="x04-body-text">To improve my author communication protocols, I introduced nonpersonal email addresses. One of these, for example, is interesting @calnewport.com, which my readers use to send interesting links or leads. Below the address is a simple note: “I really appreciate these pointers, but due to time constraints, I’m usually not able to respond.” In my experience, if you put such a disclaimer next to a personalized address, like cal@calnewport.com, it will be widely disregarded, as our expectations for one-on-one interactions are so strong. But when the disclaimer appends a nonpersonal address, like interesting@calnew port.com, I receive few complaints—without preconceived expectations, you’re able to set them from scratch.</p>
			<p class="x04-body-text">There are many different ways to build low-cost protocols into your professional life or organization, but in many cases, freeing email addresses from individuals provides a powerful boost to these efforts.</p>
			<h3 class="x05-head-a">Short-Message Protocols</h3>
			<p class="x03-co-body-text">In 2017, C. L. Max Nikias, an accomplished academic and then president of the University of Southern California, wrote a peculiar op-ed for <i class="calibre2">The</i> <i class="calibre2">Wall Street Journal.</i> He wasn’t discussing the research accomplishments that had earned him memberships in the National Academy of Engineering and the American Academy of Arts and Sciences. He also wasn’t writing about the $6 billion capital campaign he ran, or the new campus he opened, or the addition of one hundred endowed chairs that he had helped create during the previous seven years of his presidency at USC.<a href="19_Notes.xhtml#EndnoteNumber157" id="SuperscriptNumber157" class="calibre3"><sup class="endnote">18</sup></a> His topic was both more universal and more mundane: email.</p>
			<p class="x04-body-text">As Nikias explains, in his role he received over three hundred <span epub:type="pagebreak" id="page_206" role="doc-pagebreak" title="206"></span>emails a day—and this presented a problem. “The very point of being a leader is to move an organization in a meaningful direction,” he writes, “yet email can have the opposite effect, blocking the leader from accomplishing anything proactive or of lasting substance.” To avoid the fate of spending his time “glued to a screen and responding endlessly,” Nikias came up with a simple solution: “I keep all of my emails brief—no more than [the length of] an average text message.” What happens to the emails that demand an interaction more involved than what can fit into a text-length reply? Nikias calls the person or asks them to set up a meeting. “The crucial nuances of human communication don’t translate well into cyberspace anyway,” he explains.</p>
			<p class="x04-body-text">Nikias is not the only person to experiment with shorter emails. In 2007, a web designer named Mike Davidson posted an essay on his personal blog titled “A Low-Fi Solution to E-mail Overload.”<a href="19_Notes.xhtml#EndnoteNumber158" id="SuperscriptNumber158" class="calibre3"><sup class="endnote">19</sup></a> In this post, Davidson describes his frustration with the asymmetric nature of email communication. “Often times the sender will ask two or three open-ended one sentence questions which elicit multi-paragraph answers,” he writes. “In these cases, the sender spends one minute and the receiver is asked, implicitly, to spend maybe an hour.” He came up with the same general solution as C. L. Max Nikias: keep <i class="calibre2">all</i> of his emails short. He similarly identified the 160-character count of an SMS text message as a reasonable target, but, recognizing that counting characters would require some sort of special software plug-in, he instead used a simple approximation: he would keep all his emails to five sentences or fewer.</p>
			<p class="x04-body-text">To “politely” explain this rule to his correspondents, Davidson launched a simple website, <a href="http://five.sentenc.es" class="calibre3">http://five.sentenc.es</a>, that briefly explains the policy on a minimalist landing page. He then added the following signature to the bottom of all his emails:</p>
			<blockquote class="calibre6">
				<p class="x06-e-mail"><span epub:type="pagebreak" id="page_207" role="doc-pagebreak" title="207"></span>Q: Why is this email five sentences or less?</p>
				<p class="x06-e-mail-closing1">A: <a href="http://five.sentenc.es" class="calibre3">http://five.sentenc.es</a></p>
			</blockquote>
			<p class="x04-body-text">As Davidson concludes in this introductory post: “By ensuring that all e-mails I send out take the same amount of time to send (viz. ‘not a lot’), I am evening the playing field between emails and attending to many more of them in the end.”</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">The idea of strictly limiting email length is more than a gimmick. It instead represents a step that too few take in our current digital age: the placing of clear constraints around what email should and should <i class="calibre2">not</i> be used to accomplish. The hyperactive hive mind workflow wants email to be a neutral carrier that supports flexible, unstructured, ongoing conversations of all types. The short-email movement pushes back on this commitment. It specifies email as something useful for short questions, short answers, and short updates, but demands that anything more complicated be handled using a different type of communication better suited to the exchange. This might be a pain in the moment, but from the perspective of Claude Shannon’s framework, it’s a protocol that will deliver a lower average cost in the long run.</p>
			<p class="x04-body-text">As Nikias explains in his <i class="calibre2">Wall Street Journal</i> op-ed, for example, when he was overseeing the largest campus expansion in his university’s history, he regularly received emails from his construction managers with design updates or small change requests that needed quick approvals (“everything from brick samples to stained glass windows”). This is a great use of email: for the construction managers to interrupt Nikias with a phone call or meeting for every one of these approvals would have devoured his entire schedule. On the other hand, as Nikias <span epub:type="pagebreak" id="page_208" role="doc-pagebreak" title="208"></span>elaborates, when a construction issue seemed to require “substantive” discussion, he immediately bounced it out of his inbox and would instead initiate a phone call.</p>
			<p class="x04-body-text">When deployed properly, these short-message policies implement efficient protocols that use email for the type of communication for which it’s best suited (quick and asynchronous), forcing people onto better mediums for everything else. Always keeping emails short is a simple rule, but the effects can be profound. Once you no longer think of email as a general-purpose tool for talking about anything at any time, its stranglehold on your attention will diminish.</p>
			<h3 class="x05-head-a">Status Meeting Protocols</h3>
			<p class="x03-co-body-text">In 2002, Michael Hicks and Jeffrey Foster joined the computer science department at the University of Maryland as newly minted assistant professors, where they began working together to establish a research group. Faced with the need to mentor the students they were hiring, Hicks and Foster deployed a strategy that’s nearly ubiquitous among computer science professors: they set up weekly meetings with each of their students to check in on progress and work together on research problems.</p>
			<p class="x04-body-text">For a while, this approach worked fine. Like many junior professors, Hicks and Foster had only two or three students to supervise and a relatively light load of additional responsibilities outside of research and teaching. As they explain in a technical report on research productivity that they published in 2010, however, as their careers advanced, this standard mentoring strategy began to “reach its limits.”<a href="19_Notes.xhtml#EndnoteNumber159" id="SuperscriptNumber159" class="calibre3"><sup class="endnote">20</sup></a> They went from supervising two or three students total to six or seven students each. As their mentoring load grew, so did their outside commitments to review papers and write grants, further restricting their free time. <span epub:type="pagebreak" id="page_209" role="doc-pagebreak" title="209"></span>Their weekly meetings with each student became “extremely inefficient,” as they were always scheduled for the same amount of time, thirty minutes to an hour, which was almost never the right duration—sometimes they needed only ten minutes for a status update, while other times they needed a couple of hours to tackle a particularly hard problem.</p>
			<p class="x04-body-text">Hicks’s and Foster’s increasingly busy schedules made it difficult to fit in additional student meetings beyond those already scheduled for each week. As a result, students began to fall through the cracks. If someone was struggling on a problem, it could take a week before any remedies could be discussed. Hicks and Foster also noticed that one-on-one meetings failed to produce a sense of community in their research group. “We had built up a set of great individual students, rather than a collaborative research group,” they wrote. Considering all these issues, their conclusion was simple: “Clearly, something needed to change.”</p>
			<p class="x04-body-text">The instigation of that change was a research meeting that Hicks attended in 2006. He was chatting with his officemate from graduate school, who had since gone on to become a software developer. The old officemate began telling Hicks about how much he enjoyed Scrum, the agile methodology his employer used to organize software development work. Something about the idea resonated with Hicks. When he returned to Maryland, he suggested to Foster that these exotic organizational techniques from the world of software development might be just what they needed to get their research group operating more effectively.</p>
			<p class="x04-body-text">I introduced Scrum, and agile methodologies more generally, back in chapter 5 as part of our discussion of task boards. Of this strategy’s various elements, the one that most resonated with Hicks and Foster was the discipline of daily scrums. As you might recall, in standard Scrum, software development teams break up work into sprints: sessions lasting two to four weeks that are dedicated to developing a specific set of features. During the sprints, the team meets every morning <span epub:type="pagebreak" id="page_210" role="doc-pagebreak" title="210"></span>for fifteen minutes, in a gathering called a scrum. During this meeting, each person in the group answers the following three questions: (1) What did you do since the last scrum meeting? (2) Do you have any obstacles? (3) What will you do before the next scrum? They then spend the rest of the day actually working on their objectives. In software, this coordination method turns out to be much more efficient than trading emails or instant messages throughout the day. To enforce the fifteen-minute limit, and thereby prevent the meetings from dragging on into time-wasting territory, scrums traditionally require everyone to stand up.</p>
			<p class="x04-body-text">Hicks and Foster adapted the daily scrum concept to their research group. Instead of holding the meetings every day, they held them on Mondays, Wednesdays, and Fridays. They also changed the name to “status meetings.” Otherwise, the details remained largely the same: these gatherings lasted for fifteen minutes, and everyone on the research team answered the traditional three questions. They even experimented with holding the meetings standing up and found that, “surprisingly,” it really did help them stick to the constrained time limit. Hicks and Foster would participate as well, updating the students on their own daily activities. They called their modified system SCORE.</p>
			<p class="x04-body-text">A key to Hicks and Foster’s SCORE was clearly distinguishing these status meetings from more involved technical discussions. If during a status meeting it became clear a student needed a more detailed discussion to make progress, a separate “technical meeting” would be scheduled right there on the spot. Unlike the old weekly meeting system, these technical meetings were scheduled only when needed. Because their purpose was clear the moment they were scheduled, they also tended to be very efficient—everyone arrived knowing the goal of the discussion. As Hicks and Foster elaborate, because they had cleared the standing weekly meetings with every student off their calendars, there was more <span epub:type="pagebreak" id="page_211" role="doc-pagebreak" title="211"></span>than enough schedule space to fit these on-demand meetings as the need arose.</p>
			<p class="x04-body-text">Curious whether their students shared their appreciation of the SCORE approach, the professors conducted a formal survey of their research group. They asked them to rate seven different aspects of their research experience as graduate students, including “quality of interactions with adviser,” “productivity level,” and “enthusiasm for research.” For those students who were around before SCORE was instituted, they were asked to also rate their experience with the old way of organizing the group. “The responses were uniformly positive,” Hicks and Foster summarize. “SCORE improved students’ experience in every way we considered.”</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">The regular status meeting strategy that Hicks and Foster extracted from Scrum methodology is both a powerful and widely applicable communication protocol. For many different knowledge work settings, deploying these short meetings, three to five times a week, can significantly reduce ad hoc email or instant message interaction throughout the day, as everyone synchronizes during the regular gathering. This trades the small number of cognitive cycles needed for the status meetings for the large number of cycles needed to achieve the same coordination through sporadic back-and-forth messaging. As Hicks and Foster report, the regular rhythm of short meetings also creates a sense of “momentum” that helps people both feel better about their work and experience more productivity. It also increases group cohesion, as everyone knows what everyone else is working on.</p>
			<p class="x04-body-text">This protocol brings with it some inconvenience costs. In particular, waiting until the next status meeting might be annoying if you need a quick answer to a question or help overcoming an obstacle. In the <span epub:type="pagebreak" id="page_212" role="doc-pagebreak" title="212"></span>groups I’ve studied that use some variation of these regular meetings, however, these bad events seem to be much rarer than people fear. Fallback protocols, of course, can always be put in place to mitigate such concerns (e.g., “If something urgent comes up before the next status meeting, knock on my door”).</p>
			<p class="x04-body-text">A bigger issue with this style of communication protocol is that its effectiveness will rapidly diminish if you allow the status meetings to become longer and less focused. As Hicks and Foster report about their own experience:</p>
			<blockquote class="calibre6">
				<p class="x06-extract-1p">In the Fall of 2007 the meetings were approaching 30 minutes as students talked more with their adviser, during the meeting, about particular technical issues. While the longer meetings produced more technical information, they did not generate more group interest or contribution. To the contrary, the longer meetings became boring and tedious, and so we redisciplined ourselves to keep the meetings short.</p>
			</blockquote>
			<p class="x04-body-text">Many of the students they surveyed emphasized the importance of the length of the meetings. This is an idea that’s well understood in the Scrum community. Short, structured check-ins can be empowering. As soon as you let these gatherings devolve into looser, more standard-style meetings, they become a tedious burden.</p>
			<p class="x04-body-text">This distinction is important. In academia, for example, it’s common for groups of professors to work collaboratively on projects, such as a co-authored research paper or a departmental committee. A standard technique to help “move the project forward” is to establish a regularly occurring meeting, usually held once a week for an hour. The motivation here is to use appointments on your calendar—a convention that most people respect—to spark productivity. If you’re forced to <span epub:type="pagebreak" id="page_213" role="doc-pagebreak" title="213"></span>meet every week about the project, the thinking goes, then this should encourage you to get work done on a regular basis. These meetings are <i class="calibre2">not at all</i> the same thing as Scrum-style status meetings. The former is essentially an abdication of responsibility—an admission that you’re not organized enough to accomplish something independently, so you need meetings to force you into feeling like progress is happening—while the latter empowers you to get even more done on your own. Weekly meetings are too infrequent and vague. They take up too much time and often feature people trying to weasel out of commitments through doublespeak and conversational diversion. Status meetings, by contrast, are both frequent and structured in the questions they demand of participants: What did you do, what are you going to do, what’s in your way? These two shouldn’t be confused.</p>
			<p class="x04-body-text">If you work in groups on common professional goals, and you find that this work is generating too many distracting messages or aimless meetings, a well-executed status meeting protocol might make a significant difference in your productivity. As Hicks and Foster discovered, it’s surprising how much overwhelming, attention-fracturing, back-and-forth interaction can be compressed into a frequent schedule of very short check-<span epub:type="pagebreak" id="page_214" role="doc-pagebreak" title="214"></span>ins.</p>
		</div>
	


  </div>

  
  <div class="calibreToc">
    <h2><a href="../../../n6gwhr7i.html">Table of contents
</a></h2>
    <div>
  <ul>
    <li>
      <a href="02_Also_by_Cal_Newport.xhtml">Also by Cal Newport</a>
    </li>
    <li>
      <a href="03_Title_Page.xhtml">Title Page</a>
    </li>
    <li>
      <a href="04_Copyright.xhtml">Copyright</a>
    </li>
    <li>
      <a href="05_Dedication.xhtml">Dedication</a>
    </li>
    <li>
      <a href="06_Contents.xhtml">Contents</a>
    </li>
    <li>
      <a href="07_Introduction_The_Hype.xhtml">Introduction: The Hyperactive Hive Mind</a>
    </li>
    <li>
      <a href="08_Part_1_The_Case_Again.xhtml">Part 1: The Case Against Email</a>
      <ul>
        <li>
          <a href="09_Chapter_1_Email_Reduc.xhtml">Chapter 1: Email Reduces Productivity</a>
        </li>
        <li>
          <a href="10_Chapter_2_Email_Makes.xhtml">Chapter 2: Email Makes Us Miserable</a>
        </li>
        <li>
          <a href="11_Chapter_3_Email_Has_a.xhtml">Chapter 3: Email Has a Mind of Its Own</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="12_Part_2_Principles_for.xhtml">Part 2: Principles for a World Without Email</a>
      <ul>
        <li>
          <a href="13_Chapter_4_The_Attenti.xhtml">Chapter 4: The Attention Capital Principle</a>
        </li>
        <li>
          <a href="14_Chapter_5_The_Process.xhtml">Chapter 5: The Process Principle</a>
        </li>
        <li>
          <a href="15_Chapter_6_The_Protoco.xhtml">Chapter 6: The Protocol Principle</a>
        </li>
        <li>
          <a href="16_Chapter_7_The_Special.xhtml">Chapter 7: The Specialization Principle</a>
        </li>
        <li>
          <a href="17_Conclusion_The_Twenty.xhtml">Conclusion: The Twenty-First-Century Moonshot</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="18_Acknowledgments.xhtml">Acknowledgments</a>
    </li>
    <li>
      <a href="19_Notes.xhtml">Notes</a>
    </li>
    <li>
      <a href="20_Index.xhtml">Index</a>
    </li>
    <li>
      <a href="21_About_the_Author.xhtml">About the Author</a>
    </li>
  </ul>
</div>


  </div>
  

  <div class="calibreEbNav">
    
      <a href="14_Chapter_5_The_Process.xhtml" class="calibreAPrev">previous page
</a>
    

    <a href="../../../n6gwhr7i.html" class="calibreAHome">start
</a>

    
      <a href="16_Chapter_7_The_Special.xhtml" class="calibreANext">next page
</a>
    
  </div>

</div>

</body>
</html>
