<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>

    <title>Chapter 7: The Specialization Principle, A World Without Email</title>
    <meta content="urn:uuid:fdcd3175-275e-4545-9822-dd3618c31f20" name="Adept.expected.resource"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="page_styles.css"/>

  


<link href="calibreHtmlOutBasicCss.css" type="text/css" rel="stylesheet" />

</head>
<body>
    
		<div class="calibre1">
			<h2 class="x03-chapter-number" id="uD6TMcdqvZvQS4sPr8J34q6">Chapter 7</h2>
			<h2 class="x03-chapter-title" id="uoVadSYl5vgshLpA8wHyTm6">The Specialization Principle</h2>
			<h3 class="x05-head-a">A Productivity Puzzle</h3>
			<p class="x03-co-body-text">In his wide-ranging 1996 book, <i class="calibre5">Why Things Bite Back: Technology and the Revenge of Unintended Consequences</i>, the independent scholar and writer Edward Tenner tackles a “productivity puzzle” that’s proven both significant and widely overlooked: Why did the arrival of personal computers in the workplace fail to make us as productive as we predicted? As Tenner writes, “the huge investment in computing in the 1980s and early 1990s” made office workers feel “autonomous, in control, more powerful, and absolutely more productive.” It was compared to a second industrial revolution, something that would transform work in profoundly positive ways. “But toward the end of the 1980s, the sentiment grew that something was not right,” and by the early 1990s, people “from within technocratic culture”—economists, business professors, consultants—began to notice that the computer’s predicted gains were not fully materializing.</p>
			<p class="x04-body-text">This skepticism was sparked in part by discouraging data. Tenner cites a study by the economist Stephen Roach which found that between 1980 and 1989, investment in advanced technology in the service sector grew by over 116 percent per worker, while the workers’ output increased less than 2.2 percent during the same period. He also cites a study by economists at the Brookings Institution and the Federal Reserve that calculated the “contribution of computers and peripherals as no more than 0.2 percent of real growth in business output between 1987 and 1993.”</p>
			<p class="x04-body-text">Even without this data, many people were coming to similar conclusions about the failed promise of the PCs that had become ubiquitous seemingly overnight. These shortcomings were particularly noticeable in professions that existed both before and after the computer revolution. My grandfather, like me, was a college professor. I spend most of my day interacting with a powerful portable computer equipped with high-speed wireless access to the internet. My grandfather, by contrast, didn’t buy his first computer until after he retired (I helped him set it up), and there was no evidence that he ever actually used it. He would transcribe his books on yellow legal pads to be later typed up by an assistant, and he didn’t need the internet for research purposes, as he packed his office with a massive personal library covering the topics he studied. I can highlight many small-scale tasks in my life that my computer has simplified. But if we look at the big picture metric that matters most for scholars—research output and scholarly impact—I can’t argue that I’m more productive than him, especially considering that he wrote many books and ended up with an endowed chair in religious studies at Rice University before ending his career in the role of provost at a large theological seminary.</p>
			<p class="x04-body-text">Tenner offers several explanations for this puzzle, but one of his primary arguments is that instead of reducing labor, computers end up creating more work. Some of this extra work is direct. Computer systems are complicated and change every few years as existing technology becomes obsolete. They also break a lot. The result is a large time investment in learning new systems and trying to get them to work. Around the time I was writing this chapter, for example, my speaking agent stopped by my office for a visit. As we were talking about workplace inefficiency, he told me the story of the woes the agency was facing trying to get a customer relationship management system called Salesforce working properly for their particular needs. After endless hours of tinkering, they ended up having to hire an additional expert to do nothing but work with the system. My agent wasn’t so sure they were really gaining a productivity bump compared with the old days of Rolodexes and business cards.</p>
			<p class="x04-body-text">More insidious, however, are the indirect labor increases personal computing instigated. A major problem with personal computers, Tenner notes, is not that they make individual tasks harder, but that they make them <i class="calibre5">just easy enough.</i> To explain, he points to a remarkable 1992 paper, published in the journal <i class="calibre5">National Productivity Review</i> by a Georgia Tech economist named Peter G. Sassone. Between 1985 and 1991, Sassone studied twenty departments at five major US corporations, paying particular attention to the impact of the arrival of new office technologies such as personal computers.</p>
			<p class="x04-body-text">As Sassone documents, professionals paid to do highly specialized work were spending more and more time doing administrative work. “Intellectual non-specialization was the dominant characteristic at most of the organizations in this study,” he writes. The immediate cause of this imbalance, he notes, is a top-heavy staffing structure that has a skewed ratio of skilled professionals to support staff. In seeking explanations, he points to “office automation,” noting that many firms paid for costly computer systems by reducing support staff that used to perform the functions computers could now “simplify.”</p>
			<p class="x04-body-text">As Sassone argues, this trade-off can be lopsided. When you eliminate support staff, the skilled professionals become less intellectually specialized, as they have to spend more time on administrative work that computers made just easy enough for them to handle on their own. As a result, it now requires <i class="calibre5">more</i> of these professionals to produce the same amount of valuable output for the market, as they have fewer mental cycles free to conduct this specialized work. Because the professionals have much higher salaries than the support staff, replacing the latter with more of the former can be expensive. Sassone crunches the numbers and argues that the organizations he studied could immediately reduce their staffing costs by 15 percent by hiring more support staff, allowing their professionals to become more productive. To Sassone, this analysis provides a compelling answer to the stagnating productivity in the early personal computer age. “Indeed, in many instances firms have used technology to decrease, rather than to increase, intellectual specialization,” he writes.</p>
			<p class="x04-body-text">In the intervening decades, the non-specialization issues reported by Sassone have become even worse. Knowledge workers with highly trained skills, and the ability to produce high-value output with their brains, spend much of their time wrangling with computer systems, scheduling meetings, filling out forms, fighting with word processors, struggling with PowerPoint, and of course, above all, sending and receiving digital messages from everyone about everything at all times. We think we’ve advanced because we no longer need secretaries or typing pools, but we don’t factor in how much less bottom-line-boosting work we actually accomplish. I became so frustrated with the loss of specialization in my own world of academia that in 2019 I wrote an article for <i class="calibre5">The Chronicle of Higher Education</i>’s magazine that detailed the many ways in which professors’ potential intellectual output has been massively decreased due in large part to increased demands enabled by technological advances. My editor gave the piece a provocative title: “Is Email Making Professors Stupid?” It became one of the magazine’s most read articles of the year.</p>
			<p class="x04-body-text">Tenner notes that economics textbooks used to introduce the idea of efficient labor markets by telling the story of the best lawyer in town who also happens to be the best typist. The obvious conclusion of the textbook story is that the lawyer would be foolish to not hire a typist. If the lawyer bills $500 an hour and a typist costs $50 an hour, then the lawyer will clearly end up better off outsourcing the typing so she can spend more time on legal work. The arrival of computers in the workplace, it seems, obscured this once obvious reality. We’ve all become the lawyer spending hours at the typewriter.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">In this version of recent workplace history, the arrival of computer technology led to a diminishment of specialization in knowledge work. As the data cited above reinforces, this shift likely created major economic ramifications for this sector. It concerns us here, however, because it also has a significant impact on our journey to move past the hyperactive hive mind workflow. The sheer quantity and variety of tasks in a non-specialized work environment make the hive mind workflow <i class="calibre5">unavoidable.</i> When you’re faced with an overwhelming incoming stream of unrelated tasks, you don’t have enough margin in your schedule to create smarter alternative workflows—there’s just too much bombarding you to individually tame everything with optimized processes. In other words, when playing defense against an onslaught of unpredictable obligations, ad hoc, unstructured messaging soon becomes the only reasonable option to prevent yourself from drowning.</p>
			<p class="x04-body-text">This reality creates a nasty, productivity-sapping circularity. When you’re overloaded, you’re forced to fall back on the flexibility of the hive mind. This workflow, however, leads to even more fragmentation of your attention, making you even less efficient in getting things done. The result: overload increases! As this spiral continues, you’ll eventually end up in an overwhelmed state of inefficient desperation, where the idea that you can somehow carefully engineer smarter workflows seems impossible.</p>
			<p class="x04-body-text">If we want to tame the hyperactive hive mind, therefore, we must first tame the trend toward non-specialization. By reducing the number of different obligations you’re required to tackle, you’ll gain the breathing room needed to then optimize the workflows you deploy to handle what remains—creating a one-two punch of productivity gains that can completely transform your effectiveness or that of your organization. This chapter asks you to embrace the following principle as a crucial step toward moving past the hive mind:</p>
			<aside class="sidebar">
				<div class="w10r-email">
					<img alt="" class="w" src="page_230.jpg"/>
				</div>
				<h3 class="x10-sidebar-title">The Specialization Principle</h3>
				<p class="x10-sidebar-text-last">In the knowledge sector, working on fewer things, but doing each thing with more quality and accountability, can be the foundation for significantly more productivity.</p>
				<div class="clear"></div>
			</aside>
			<p class="x04-body-text">The notion that less can somehow lead to more might be uncomfortable at first, especially in the context of a competitive workplace. Some might fear that if they reduce the obligations they accept, or push back on tasks that fall outside their specialty, they’ll seem like less of a team player, or perhaps even lose their job. But as Greg McKeown argues in his 2014 bestseller, <i class="calibre5">Essentialism</i>, the opposite dynamic might be more likely. He tells the story of an executive he calls Sam, who, in an effort to be a “good citizen” in the Silicon Valley company where he worked, said yes to everything, leading to a severe case of chronic overload. Eventually, the company offered him an early retirement package. Sam considered accepting the package and opening his own consulting practice, but on the advice of a mentor, he decided he would try staying at the firm—except he would stop saying yes to everything and instead accept only work that he thought was essential. He figured he had nothing to lose: if this frustrated his employer, he still had the option of taking the retirement package and moving on.</p>
			<p class="x04-body-text">As McKeown recalls, Sam stopped volunteering for last-minute presentations and ended his habit of being the first to jump in on email threads. He stopped attending conference calls that weren’t relevant and learned that just because someone sent him a meeting invitation didn’t mean he had to accept. He also started saying no more often. If he didn’t think he had the time to do something well, or if it was not a top priority, he would just explain this frankly and decline. Sam worried this was all a little “self-indulgent,” but his worries were misplaced. No one got mad at him; they instead admired his clarity. The quality of his work improved to the point where his managers awarded him the biggest bonus of his career.</p>
			<p class="x04-body-text">Sam’s story highlights a truism we easily forget: there are few things more valuable than someone who consistently produces valuable output, and few approaches to work more satisfying than being given the room to focus on things that really matter. The strategies that follow in this chapter will help both individuals and organizations shift toward the type of specialization enjoyed by Sam: a state in which you work on less, but do this work much better; a state in which it’s possible to move past the hyperactive hive mind to embrace slower and more effective ways of organizing work.</p>
			<h3 class="x05-head-a">Case Study: Working at the Extremes</h3>
			<p class="x03-co-body-text">In the spring of 2019, I taped an interview for <i class="calibre5">The Rich Roll Podcast.</i> During the episode, we talked about some of the ideas explored in this book. I mentioned that the agile methodologies popular among software developers were an interesting example of a more thoughtful alternative to the hyperactive hive mind workflow. A few months later, soon after the episode was released, I received an old-fashioned printed letter in the mail, delivered to my office at Georgetown University. It was from a longtime Silicon Valley programmer and executive named Greg Woodward. He mentioned that he had just heard my interview with Roll and was particularly interested in our discussion of agile methodologies. As he explained, if I really wanted to understand the potential of optimized workflows, I needed to learn about the small software start-up where he was currently the CTO. They deployed a methodology that “takes all of the agile practices and dials them up to a 10.” It was called, appropriately enough, <i class="calibre5">extreme programming</i>—and it blew my mind.</p>
			<p class="x04-body-text">Woodward began writing code and managing development teams in Silicon Valley in the mid-1990s, after completing his PhD in mechanical engineering at Stanford. His dissertation applied an efficient style of algorithm to run physics simulations relevant to the NASA space shuttle program. He remembers his first decade working in software development, a period of lumbering waterfall schedules and novel-thick feature specifications, as “frustrating.” In 2005, looking for a better way to write code, he managed to find a job at Pivotal Labs, a company that had developed a reputation among Silicon Valley insiders for its eccentric but outrageously productive approach to software development. They called it extreme programming, or XP for short. As Woodward explained to me, this methodology is relentlessly optimized. “XP has taken all of the software development best practices,” he said, “honed them extensively, and then discarded anything that didn’t work.” Woodward became a believer. After working with Pivotal for several years, he brought the XP methodology with him to every company he’s helped managed since.</p>
			<p class="x04-body-text">Here are some (but not all) of the core ideas behind XP. Programmers who are working on a big project are divided into smaller development teams, typically consisting of no more than ten individuals. In an era where remote work is increasingly common, XP development teams work in the same physical room, where face-to-face communication is prioritized over digital alternatives. “We rarely check email throughout the day,” Woodward told me, discussing the development team he currently manages. “Sometimes my developers will literally go days without checking emails.” If you need something from someone else on your team, you wait until they look like they’re at a natural stopping point and then walk over and ask them. Woodward describes these conversations as “one hundred times more efficient than email.”</p>
			<p class="x04-body-text">One complaint I’ve heard from many software developers is that they’re often bothered electronically by people outside their team, such as members of the marketing department, or customers—leading to constant interruptions that pull them away from their primary work of making great software. I asked Woodward how XP handled these distractions. “The project manager serves as the liaison to the rest of the company and customers,” he explained. “[These outsiders are] trained to funnel their feature requests, bug reports, and so on through the project manager. . . . The development team is shielded.” The project manager places any tasks extracted from these interactions into a priority queue. The team works on tasks from the queue one at a time, deciding after each task is complete which they should tackle next.</p>
			<p class="x04-body-text">One of the more extreme elements of XP is its commitment to what’s known as pair programming. XP developers work in groups of two that share a computer. “Unenlightened managers would think that you would get fifty percent of the productivity with two developers working on the same thing at the same computer,” Woodward explained. “In actuality, you get three to four times <i class="calibre5">more</i> productivity.” As he elaborated, the crucial step in programming is not the actual act of mechanically typing commands into a computer, but instead crafting the underlying solution that is then translated into code. When you work with another person, you can push back on each other’s ideas—finding flaws and coming up with new angles that might work better.</p>
			<p class="x04-body-text">To illustrate this concept, Woodward gave me a recent example that had occurred a couple of weeks before our conversation. At the time, he explained, he had an idea for a software feature that would provide a “big performance boost.” He was thinking about the idea on his commute into his San Francisco office. “By the time I got into work, I thought I had the strategy for implementing the feature pretty much all figured out.” Woodward sat down with his pair programming partner for the day and began explaining his idea. They discussed it for forty-five minutes. During the conversation, his partner “poked a few holes” in the strategy and identified a few “edge cases” where it might not work as well as Woodward hoped. His partner then had a breakthrough thought about how they might eliminate one of the message types from the system, sidestepping some of the worst of these issues. By noon, they had the new and improved system up and running. As Woodward explained, “I feel sure that if I had just pursued the design I was thinking of in the car, the implementation would have taken me days; so right there is a three-to-four-times productivity boost.” Reflecting on how much more effective programmers are working in pairs, he defaulted to superlatives: “It’s amazingly powerful.”</p>
			<p class="x04-body-text">Another source of productivity in the XP method is its intensity. When you’re working with a partner, you’re locked into your work. There’s no tactful way to disrupt your focus to check email or idly surf the web, as doing so would leave your partner just sitting there, annoyed, waiting for your attention to return. Furthermore, given a work culture in which you’re expected to give your full attention to the problem at hand, with a project manager shielding you from distractions, you end up spending most of your day actually accomplishing hard things. XP is as close to a pure deep work environment as I’ve ever seen deployed successfully.</p>
			<p class="x04-body-text">Given this intensity, another core tenet of XP is “sustainable pace.” Most practitioners of this methodology stick to traditional forty-hour workweeks, in defiance of the Silicon Valley norm of seventy to eighty hours. “With XP, we want you to come in, work super hard for eight hours, then go home and think about other things,” Woodward explained. This is not an act of generosity, but instead a recognition of the limits of the human mind. “The average engineer at a non-XP company may only do two to three hours of actual work a day; the rest of the time is spent surfing the web and checking email.” When you’re actually <i class="calibre5">working</i>—not sending messages about work, not attending meetings about work—eight hours in a single day can be quite demanding. When an engineer joins an XP team, Woodward explained, it’s common for them to feel “zapped.” The intensity of actually focusing for eight hours can be overwhelming, and many XP rookies in their first week head straight to bed when they return home from work. Some engineers never adjust to this culture of focus or, more pressingly, to the extreme accountability that it fosters (there’s no slacking off, or hiding a lack of ability, in an XP office). They soon flee for more traditional software companies, where they can hide shortcomings behind bluster, or default to highly visible busyness as an alternative to actually doing the hard but satisfying work of creating valuable output with their brains.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">The core of the specialization principle is the idea that less can be more. If you design workflows that allow knowledge workers to spend most of their time focusing without distraction on the activities for which they’re trained, you’ll produce much more total value than if you instead require these same workers to diffuse their attention among many different activities. This latter course is often the more convenient option in the moment, but rarely the most productive in the long term. Extreme programming underscores the possibility of rejecting this status quo and going all in on specialization.</p>
			<p class="x04-body-text">I imagine that XP development teams must be a pain to deal with in the context of the larger companies that employ them, but it’s hard to care about such inconveniences when you see the awe-inspiring pace at which they produce amazing results. “An XP team of eight to ten can do the work of a non-agile team of forty to fifty,” Woodward told me. “I’ve seen it over and over again.” These are the productivity boosts at stake in any number of knowledge work fields currently suffering from a severe diminishment of specialization. The remainder of this chapter explores strategies for reaping the benefits of an XP-style specialization.</p>
			<h3 class="x05-head-a">Do Less, Do Better</h3>
			<p class="x03-co-body-text">In a 2010 essay, Anne Lamott reflected on a particular piece of advice that distresses her writing students. She tells them that creative pursuits can be deeply rewarding, but then she brings up the bad news: “You have to make time to do this.” As she elaborates, this requires aspiring writers to understand the harm caused by their “manic forms of connectivity—cell phone, email, text, and Twitter.” She then lists other seemingly critical activities that her students might have to reduce—gym trips, housecleaning, consuming news—if they really want to produce something important. This advice might sound straightforward, but Lamott notes that her students often find it challenging. They lead busy lives, and the thought of reducing that busyness seems like a step backward. “I know how addictive busyness [is],” she writes, but this “whirlwind” isn’t compatible with producing accomplishments that provide lasting meaning and pride.</p>
			<p class="x04-body-text">In rarefied pursuits like professional writing, the importance of doing fewer minor things so you can do the main things better makes a lot of sense. We like to imagine our novelists cloistered in sheds, toiling in undisrupted concentration, oblivious to the distractions of the world. But we also assume that this lifestyle doesn’t generalize to the less romanticized setting of standard office work. The specialization principle argues it should. While it’s true that most knowledge work positions lack both the autonomy and clarity of purpose found in writing, the same basic dynamic that drives authors toward a more minimalist set of obligations applies to any cognitive pursuit where you produce value by focusing your brain. In the world of computer programming, XP gained this minimalism through a strict set of rules, enforced by the management, that had been polished over decades of practice. Here we explore a pair of strategies for making progress toward this goal in knowledge work fields where such structures don’t yet exist.</p>
			<h4 class="x05-head-b">Work Reduction Strategy #1: Outsource What You Don’t Do Well</h4>
			<p class="x03-co-body-text">When I was early in the research process for this book, I received an email from an entrepreneur I’ll call Scott, who four years earlier had started a successful home décor company. As Scott explained, soon after starting the company, he found himself suffering from chronic overload. “I did all the things most people do with start-ups,” he told me. “I had a bunch of employees, reached out to lots of people for marketing and networking, and had a very active Instagram.” He knew his value was in designing elegant and innovative furniture, but he was instead “spending [his] days in constant communication.”</p>
			<p class="x04-body-text">At some point, perhaps after one too many phone conferences with his Instagram consultants, Scott decided he was done with forced busyness. “I was no longer doing what I set off to do.” In response, he sought ways to radically pare down his day-to-day responsibilities. His first move was to sign an exclusive wholesale agreement with a single national retail chain. Not only did this vastly simplify distribution, but it removed his company’s need to deal with marketing, sales, and customer service. He then found a small number of manufacturing partners with large enough workforces to easily handle their typical orders.</p>
			<p class="x04-body-text">Scott is “crystal clear and up-front” with these partners about what he wants, and then empowers them to make their own decisions to help keep the business moving. “I don’t want to be a linchpin,” he explains. To underscore the importance of this delegation, he told me the story of a meeting in which he was one of ten attendees. The objective: to confirm a new black glaze to use on one of their products. “It was infuriating,” he said. “Trust <i class="calibre5">one</i> person to make that decision, stop cc’ing everyone on emails, and get to work!”</p>
			<p class="x04-body-text">Scott reports that he now gets “only a few” emails a day. He dedicates his reclaimed mental bandwidth to the areas where he thinks he can bring the most value: “New design projects, big strategic decisions, and innovation solutions to age-old design problems.” By outsourcing so much of his business to retail and manufacturing partners, Scott reduced the profit margin he sees. If he ran everything in-house, he could, given enough attention, squeeze out more efficiency and keep more of the revenue. He’s also given up some control. He no longer individually curates the brand’s image, as he did in his days of relentless Instagram engagement, and he has to work with the material limitations of his manufacturing partners. But Scott doesn’t care. By focusing almost all his energy on his specialty—designing great products and making big picture strategic decisions—the long-term profitability of his company is vastly increased compared with the alternative scenario where all this thinking gets done in small slivers of time between endless meetings about glazing decisions.</p>
			<p class="x04-body-text">Scott’s story highlights an effective strategy for becoming more specialized in your work: attempt to outsource the time-consuming things that you don’t do well. The key obstacle to overcome in applying this strategy is that you’ll likely pay a price in the short term before you reap long-term benefits. Scott, for example, had to give up profit margin and some control over his business to create a company that would be massively more successful over time.</p>
			<p class="x04-body-text">In many cases, the price you pay to outsource comes directly out of your pocket. In 2016, podcaster and entrepreneur Pat Flynn reached a tipping point with his email inbox. He remembered when he used to embrace the idea of <i class="calibre5">inbox zero</i>: the objective of reducing your email inbox back down to empty at the end of each day. At some point, as demands on his time from partners and listeners increased, he made <i class="calibre5">inbox 100</i> his new goal. Then one day he noticed his unread messages had ballooned to over nine thousand. He was trying to run a business but had instead become a professional email manager.</p>
			<p class="x04-body-text">His solution was to hire a full-time executive assistant. As Flynn details in a podcast episode titled “9000 Unread Emails to Inbox Zero,” it took him and his assistant several weeks to work out a system for her to successfully manage his inbox. They produced a rule book that allowed her to handle almost every message on her own, bringing to Flynn’s attention only what required his input. Most important, Flynn was freed from the sense that if he wasn’t constantly checking his inbox, elements of his business might suffer. Hiring a high-end executive assistant is expensive. But Flynn had come to a similar conclusion as Scott: If he wasn’t able to spend significant time on the specialized activities on which his business was built, then what was the point of running that business?</p>
			<p class="x04-body-text">If you run your own business or freelance, once you adopt this mindset that unskilled activities slow down your growth, you’ll begin to notice numerous opportunities to reduce non-vital efforts. Other examples I’ve encountered include hiring a bookkeeper to handle accounting and invoices, using a virtual assistant to book meetings and travel, having a web designer on retainer to keep your web operations humming, using social media consultants to handle your online branding, or bringing on experienced customer service representatives, empowered to make decisions without your input. The productivity writer Laura Vanderkam argues that we should in general be more aggressive in identifying work that can be delegated. “For instance, it doesn’t make sense for licensed, experienced teachers to be grading most worksheets,” she writes. “Automating this (via technology) or else hiring graders to report back the results would free up teachers to dream up better lessons and share best practices.” Once you start looking for opportunities to off-load nonessential tasks, you’ll be surprised by how many you find.</p>
			<p class="x04-body-text">All these outsourcing activities cost money, and some take you out of the loop on issues you might be used to monitoring, but they all have the potential to allow you to spend more time on the small number of things that actually move the needle in your professional context. This strategy is not for everyone. But if you have the luxury of autonomy over your work life, then realize that you don’t have to tolerate overload. Outsource what you can so you can excel at what you can’t.</p>
			<h4 class="x05-head-b">Work Reduction Strategy #2: Trade Accountability for Autonomy</h4>
			<p class="x03-co-body-text">The strategy we just discussed is well suited for those who are their own bosses, but what about those suffering from chronic overload within large organizations? I learned an interesting solution for this common scenario from a reader I’ll call Amanda, who has been working at a global engineering design firm since 2009. As Amanda explained when she contacted me, during the first six years of her job, she kept her head down and tried to earn the trust of her bosses by producing the best work possible. This wasn’t easy given the culture of chronic overload in her office.</p>
			<p class="x04-body-text">As Amanda elaborated, there are two categories of work possible at her firm. The first category she calls “reactive, easy, brain-dead work.” As she explains: “This is where you show up, check your email, do what the emails tell you to all day, and then go home.” The second category she calls “intentional, difficult, focused, creative work,” which is when you “spend time thinking about what’s the most important, long-term, impactful thing for you to do for your big projects.” In the office where she works, the first type dominates. There’s an expectation that you keep up with your inbox—“We use email a lot”—and once you’re stuck monitoring the constant influx of random tasks and requests, you never quite make it over to that second category.</p>
			<p class="x04-body-text">Somehow, amid this scrum of hive mind chatter and chronic overload, Amanda managed to carve out a valuable niche for herself within the company. The entire engineering industry was going through a shift from 2D to 3D information models, and Amanda was helping her company with this transition—fielding questions and assisting individual projects. During this period, she read my 2012 book, <i class="calibre5">So Good They Can’t Ignore You</i>, which suggests among other things that once you have made yourself valuable to your organization, you should use this <i class="calibre5">career capital</i> as leverage to remake your position into something more satisfying. Inspired but nervous, Amanda proposed to her bosses that she shift into a more strategic role, where instead of fielding random questions and helping with individual projects, she would work on technology strategy for whole regions. In this role, she would be entirely remote, working on a small number of long-term projects at a time.</p>
			<p class="x04-body-text">Amanda assumed her bosses would turn down her request, and she was prepared to leave the company to offer a similar service as a consultant. To her surprise, they agreed to give the new arrangement a trial. “Since I’m remote, I can no longer rely on ‘showing up’ functioning as a measure of my value to the company,” Amanda explained. “It’s all what I produce. So I turn off email, I put my phone on airplane mode, I give my colleagues emergency contacts, and then I focus.” She left behind brain-dead work and committed herself fully to the alternative.</p>
			<p class="x04-body-text">There’s both opportunity and danger in Amanda’s arrangement. The opportunity, of course, is that the combination of her reduced portfolio and results-oriented evaluations gives her the ability to remove herself from the hyperactive hive mind workflow. “Since I don’t have any supervision over my daily routine,” she said, “I have a lot of freedom to chart the shortest course to where I think I need to be to deliver maximum value.” This makes it possible for her to vastly increase her value to her company, which, in a virtuous cycle, can gain her even more autonomy.</p>
			<p class="x04-body-text">The danger, of course, is that now she <i class="calibre5">has</i> to produce. Her note about the comfort of “showing up” to demonstrate value is more than just a casual dismissal of normal work culture. For many people, this strategy provides a professional safety net. Busyness is controllable: if you decide to be visibly busy, you know with certainty that you can accomplish this goal. Producing high-value results under scrutiny, as Amanda is now committed to doing, is much more demanding! Just deciding to produce valuable things is not enough to ensure that you’ll pull it off. Recall our XP case study, where Greg Woodward noted that a lot of developers dislike the extreme environment and end up leaving after a few weeks. The aspect that most distresses them? The transparency. You’re either producing good code, or you’re obviously not. Some are simply not comfortable with this blunt assessment of what they’re actually accomplishing.</p>
			<p class="x04-body-text">Amanda’s general strategy of offering accountability to gain autonomy, therefore, is a powerful approach to escaping chronic overload, but it’s also risky. If you’re entrenched in a large organization where chronic overload reigns, and you’ve developed an expertise that obviously makes you valuable, then this strategy may be one of your best moves to gain the breathing room needed to remake your workflow into something more effective. You don’t necessarily have to match Amanda’s boldness when applying this strategy. Sometimes even just volunteering for a large initiative provides you enough cover to ignore messages and turn down meeting invites without annoying people, as you now have an unassailable excuse: “I would, but am swamped trying to handle [big thing].” But it’s hard to avoid the underlying economics: to gain something valuable like autonomy means you have to offer something unambiguously valuable in return. You must, in other words, become accountable for what you produce if you want the freedom to improve how you do so.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">There are many ways to combat the overload created by diminished specialization. The strategies explored here get straight to the value proposition of knowledge work. Not all efforts create the same value for your organization. If you spend more time on the high-value activities at the expense of spending less time on the low-value activities, you’ll produce more value overall. In the short term, of course, there are other costs, such as up-front expenses, or inconveniences to your colleagues, or, as in Amanda’s case, reduced job security. But as Anne Lamott emphasizes to her writing students: it’s almost always worth it. The rewards of becoming significantly more effective at the things that really count will swamp the pain of overcoming the minor obstacles this specialization generates. Less <i class="calibre5">can</i> be more; the trick is building up the courage to embrace this in your own work life.</p>
			<h3 class="x05-head-a">Sprint, Don’t Wander</h3>
			<p class="x03-co-body-text">One of the key ideas from our extreme programming case study was the importance of working on one objective at a time, without interruption, until it’s complete. This commitment to working in <i class="calibre5">sprints</i> is now widely held throughout the software development world, even in teams that don’t adopt the full set of strict XP rules. The history of sprinting can be traced back to the creation of Scrum, one of the original agile methodologies for software development, back in the 1990s. During a Scrum sprint, a team works exclusively on a single specific deliverable, such as adding a new feature to a software product—no complex task lists, schedules filled with meetings, or intricate daily planning processes are needed. This productivity hack has become an accepted best practice in this field. It’s now widely agreed that it would be inappropriate to bombard a development team in the middle of a sprint with calendar invites for meetings, or to badger them via email to help out with unrelated projects. In most software companies, it’s completely reasonable for developers to be unresponsive during a sprint, as the culture is one that accepts that this is the best application of their energy at the moment.</p>
			<p class="x04-body-text">Software development, of course, is a highly specific endeavor. The question is whether this particular idea—working in sprints on a single objective—can apply beyond the world of programming as a general method for achieving more specialized work. Fortunately for our purposes, a partner at a tech-focused investment fund has spent the past decade exploring this exact question.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">In 2009, Google started a venture capital fund to invest some of its earnings into up-and-coming tech start-ups. It was called Google Ventures. In 2015, the fund was spun off as a standalone entity, now called just GV, with Google’s parent company, Alphabet, remaining its only limited partner (source of money). This close connection between GV and Google makes it inevitable that ideas from the search giant’s software culture would make their way into the culture of the fund. One such idea to follow this path was the value of sprints.</p>
			<p class="x04-body-text">A GV partner named Jake Knapp knew a lot about sprints in software development. In his previous role at Google, he’d helped teams implement this strategy to increase their effectiveness. When Knapp transitioned to GV, he began experimenting with ways to apply this tool to other types of business challenges. He eventually came up with a revised version of the strategy that he called the “design sprint.” The goal of the design sprint is to help companies efficiently answer critical questions by requiring executives to dedicate five consecutive days of (nearly) uninterrupted concentration to the problem at hand. In 2016, having deployed these sprints with over one hundred of their portfolio companies, Knapp and fellow GV partners John Zeratsky and Braden Kowitz introduced the design sprint methodology to a larger audience with their book <i class="calibre5">Sprint: How to Solve Big Problems and Test New Ideas in Just Five Days.</i></p>
			<p class="x04-body-text">Design sprints are meant to help you figure out where your team or organization should focus its efforts. In a traditional workplace, these decisions typically unfold over months of meetings and debates, augmented with numerous email threads, ultimately leading to costly investments in new products or strategies that all too often fall short. A design sprint attempts to compress this work, from the initial debates all the way to receiving market feedback on the resulting decisions, into one highly efficient workweek. On the first day, you figure out the problem you’re trying to solve. On the second day, you sketch out competing solutions. On the third day, you make the tough decision about which solution you want to explore, transforming it into a hypothesis that can be tested. On the fourth day, you throw together a rough prototype that allows you to test the hypothesis, and on the fifth and final day, you put real clients in front of the prototype and learn from their feedback. These sprints have been used to test new products, but they’ve also been used to try out advertising strategies and even to determine whether there’s a reasonable market for a given idea.</p>
			<p class="x04-body-text">The design sprint encourages specialization, as practitioners are asked to concentrate for five days in a row on a single important problem. Curious about the degree to which this single-minded focus is actually achieved, I got in touch with Jake Knapp and asked him a question I felt got to the core of this issue: “Are people still checking email during design sprints?” He explained that the hard rule during sprint sessions is “no laptops, no phones, no tablets, nothing.” The only exception is the use of computers on the fourth day, if needed, to construct a prototype. When Knapp coaches a team through a sprint, he tells them to set out-of-office autoresponders so they won’t be stressed out by their lack of connectivity. (He calls these autoresponders a “pressure release valve” for participants worried about stepping away from the constant thrum of the hyperactive hive mind.)</p>
			<p class="x04-body-text">Participants <i class="calibre5">are</i> allowed to use devices before and after the sprint sessions, which last from 10:00 a.m. to 5:00 p.m. They may also check devices during breaks, but they must do so outside the room where the sessions occur. Knapp told me that he suspects a more extreme approach, in which communication outside the team is banned altogether throughout the week, could “yield even deeper focus and better results.” But he thought it might be a “hard sell” to persuade a group of modern knowledge workers to sign up for five days of complete disconnection. After a beat, however, he noted that once they “experienced the benefits” of such disconnection, the idea might start seeming less extreme.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">Jake Knapp’s design sprint process works great for making high-stakes decisions about future directions for your business, but there are many other areas in knowledge work where sprints could prove effective. I talked with a communication consultant, for example, who told me that when her firm took on major event-planning contracts, the partner in charge of the project would schedule an in-office workshop, sometimes lasting multiple days, in which the team would sequester itself to work out the best possible game plan for the event. One could imagine similar sprints being deployed by academic research teams trying to make progress on a big open problem. Indeed, in <i class="calibre5">Deep Work</i>, I discuss how Wharton professor Adam Grant used exactly this strategy to become one of the youngest professors to earn tenure in Wharton’s history.</p>
			<p class="x04-body-text">Most knowledge workers are so entangled in obligations and commitments and legacy methods of getting things done that there’s often no easy way to reduce this load in one bold move. Sprint processes offer an indirect alternative. If you put in place a culture of design sprint–style sessions, you don’t eliminate the other work in the short term, but you do constrain its impact—allowing you to switch back and forth between a specialized existence and a hyperactive one (which is better than always being in the latter state).</p>
			<p class="x04-body-text">Regular sprints also support longer-term changes to your workload by making it easier for individual knowledge workers to lobby for fewer obligations overall. In a standard hyperactive hive mind–style office, asking for less work might come across as laziness (<i class="calibre5">why do you get to do less?</i>). In a culture where sprints are common, however, you can point to the massive value these focused pushes are producing, and frame the minutiae that define chronic overload as impediments to this value. Once you can establish a clear dichotomy between convenient busyness and bottom-line-boosting sprints, it becomes harder to justify the former as more important.</p>
			<p class="x04-body-text">For any sprint process to succeed requires buy-in from everyone involved. When you’re in a sprint, you must trust that you really can step away from your inbox and chat channels, and do this without generating frustration or annoyance. If you’re self-employed, you must clearly explain to your clients that your work is fundamentally bimodal, and during the sprint modes, you cannot be reached. If you work for a larger organization, enthusiasm for sprints must emanate from the top. But once this regular specialization is embraced, its benefits will soon become apparent. As Jake Knapp explained to me, one of the best things about helping teams run sprints is the enthusiasm it generates from the participants. Chronic overload makes us miserable. When we’re given a chance to escape its frustrating clutches and instead do what we were trained to do, to apply our skills to produce the best possible results, work transforms from a chore into something we actually find satisfying.</p>
			<h3 class="x05-head-a">Budget Attention</h3>
			<p class="x03-co-body-text">As mentioned earlier, in 2019 I published an article in <i class="calibre5">The</i> <i class="calibre5">Chronicle Review</i> titled “Is Email Making Professors Stupid?” The article discussed more than just email. I examined the many different ways in which the haphazardly constructed workflows common in academia sap professors of their ability to be productive. One of the topics I tackled was service. At most universities, professors dedicate some of their time to activities that help the school function, such as reviewing applications, or sitting on committees, or participating in self-governance. These obligations are essential to academic life. The problem, however, is that there are few controls on how these tasks are assigned. “A typical approach to service is to say ‘yes’ to a fire hose of incoming requests,” I wrote, “until you become so overcommitted that you retreat in desperation to catch up.”</p>
			<p class="x04-body-text">In an essay written in response to my <i class="calibre5">Chronicle </i>article, a philosophy professor named Bruce Janz elaborated on the problem of overwhelming service obligations in higher education, writing:</p>
			<blockquote class="calibre6">
				<p class="x06-extract-1p">It comes from the attitudes of many of those administrators, who think that their new streamlined procedure is the greatest thing ever and will only require just a little form or a little input by faculty, or a little something else. It is caused by . . . other committees [formed] to mentor or help or strategize or support or brainstorm or any number of other things, each of which requires just a little more from the same people. It comes from none of these administrative committees seeing any incentive to combine or rationalize anything, so the same work has to be done over and over.</p>
			</blockquote>
			<p class="x04-body-text">As Janz’s analysis points out, a major source of service overload in academia is the asymmetry inherent in asking for someone’s help. If you run an administrative unit within a university, or are tasked with forming a committee, then from your perspective, asking me or Bruce Janz to attend some meetings or participate in a survey or review some files seems completely reasonable. You’re not demanding a huge time commitment, and our minor assistance is crucial for you to succeed with your major objective. For us to say no would seem uncivil, if not downright antisocial.</p>
			<p class="x04-body-text">The problem, of course, is that these requests accumulate. If two dozen other units and committees all make these same reasonable requests, suddenly we’re desperately overwhelmed by work that has little to do with our main objectives of research and teaching—a recipe not just for inefficiency, but outright frustration.</p>
			<p class="x04-body-text">This dynamic extends beyond academia. Knowledge workers in general are pushed into chronic overload by similar asymmetries. It’s so easy for the marketing department to shoot over a meeting invite to solicit your opinion on a new product campaign, or for your boss to send a quick email asking you to organize a lunch seminar series for your team. To say no to any one of these requests in isolation makes you seem curmudgeonly or lazy. But the sum total of many such “simple” requests leads you to become constantly overwhelmed by everything that has to get done.</p>
			<p class="x04-body-text">In the extreme programming case study, the solution to this problem was to essentially forbid people in the company from directly asking the programmers to do things. Their focus is supposed to remain locked into implementing the feature at the top of their priority queue. If you need something from them, you can talk to their project manager, who will figure out what’s actually reasonable to bother them about, all the while trying to protect their primary goal of producing code.</p>
			<p class="x04-body-text">Sadly, this model doesn’t necessarily extend to all knowledge work positions. If professors stopped doing all service, for example, the university would stop functioning. Similarly, while the programmers in an XP shop can afford to be isolated, many other knowledge workers really must be available to field questions and requests, as this is the essence of collaboration. What’s needed is an idea that enables these work requests to exist, but prevents any one person from having to accept too many. In my article, I proposed one such idea.</p>
			<p class="x04-body-text">“One solution is to directly confront the zero sum trade-off generated by service obligations,” I wrote. “Professors have a fixed amount of time. . . . Instead of ignoring this reality, we should clearly articulate these trade-offs by specifying the exact amount of time a faculty member is expected to devote to service each year.” As I then explained, in this plan, professors would not be allowed to exceed whatever time budget they had agreed on with their department chair for the semester.</p>
			<p class="x04-body-text">My service budget proposal was meant more as a thought experiment than a concrete plan, but it highlights a crucial reality about overload: it’s common, in part, because its magnitude is hidden. Professors are always vaguely and persistently busy. In this undifferentiated mass of activity, it’s easy to push just <i class="calibre5">one more thing</i> onto someone else’s plate. But now imagine, for the sake of argument, that a new rule was enacted that demanded that service time was carefully measured and not allowed to exceed a fixed budget without the explicit permission of your dean. Reaching a state of extreme service overload would become more difficult in this scenario. If you’re the dean, for example, and you’ve invested a lot of money in bringing a top scholar to your university, when you’re presented with a request to increase her weekly service budget to thirty hours so she can keep up with all her different service requests, you’d have a hard time signing that form! When facing stark numbers, it becomes difficult to justify overload—why bother hiring a hotshot if the bulk of their time is spent doing administrative work? When these numbers are obfuscated, it’s much easier to just shrug about the reality that we’re all busy.</p>
			<p class="x04-body-text">In knowledge work more generally, approximating something like my hypothetical service budget could be a powerful strategy for pushing back against overload. There are three keys for a strategy of this type to work. First, it must start from the premise that your time and attention are limited. Second, it must quantify how much of your time and attention is currently dedicated to whatever category of work you’re attempting to budget. And third, whoever is responsible for determining how much work of this type you have to do must confront your current commitments when asking you to do more, even if this person is you.</p>
			<p class="x04-body-text">One minor area in academia where strategies of this type are already prevalent is peer review requests. Academic publishing depends on peer review by professors in the relevant field. Accordingly, most professors receive a lot of requests to review articles. A common strategy to tame these demands is to fix a <i class="calibre5">quota</i> of how many reviews you do per semester. Once you hit your quota, you politely decline additional requests, explaining that you’ve hit your limit. This approach works well because it provides the reason why you cannot take on more work, meaning that the only way a requester can pressure you into taking on a review anyway is to implicitly argue that your reason isn’t good.</p>
			<p class="x04-body-text">If you ask me to review a paper, and I simply say, “I don’t know—I’m really busy,” it would be easy for you to keep pushing: “I know, but it’s really important to me. Could you fit this in?” On the other hand, if I say, “I wish I could, but I already hit my quota of ten paper reviews per semester,” for you to push back, you would have to argue: “You should be reviewing more than ten papers a semester.” Which is not a strong argument, as ten is a lot of papers, and a quota of that level is quite reasonable.</p>
			<p class="x04-body-text">Moving beyond academia, another budgeting strategy I’ve seen used with great success is the idea of deep-to-shallow work ratios, which I first proposed in my book <i class="calibre5">Deep Work.</i> The idea is to agree in advance with your supervisor how many hours each week should be spent on the core skilled activities for which you were hired, and how much on other types of shallower support or administrative work. The goal is to seek the balance that maximizes your value to your organization. You then measure and categorize your work hours and report back how close you came to achieving your optimal ratio.</p>
			<p class="x04-body-text">After <i class="calibre5">Deep Work</i> was published, many readers reported success with this strategy. Crucial to its effectiveness is the way in which it forces your supervisor to get specific about workloads. Assuming you’re good at something valuable, your supervisor is not going to insist on a work ratio made up almost entirely of shallow work, as this is self-evidently absurd when presented clearly. When you come back and report that according to your measurements this is what’s currently happening with your time, it becomes much easier to authorize changes that will directly ease up the overload you’re suffering, as the alternative would be for the supervisor to admit that your skewed ratio is in fact best for the organization (which it almost certainly is not).</p>
			<p class="x04-body-text">Meeting budgets are also common. The idea is to block off on your calendar the times you’re available for meetings. These blocks should add up to the total amount of time you think is reasonable to spend in meetings in a given week. When meetings are subsequently requested, you schedule them <i class="calibre5">only</i> in these slots, making meeting overload impossible. If you use a shared calendar or an online scheduling tool, you’re saved from even having to say no; the person trying to set up the meeting will see that all your time slots are filled.</p>
			<p class="x04-body-text">This strategy is especially popular among entrepreneurs who have great autonomy in their work. One company founder I know deploys a simple rule for his staff and clients: no meetings before noon. This allows him to get important work done without interruption every single day. Another founder I know is even more extreme: his schedule for meetings with people outside his company has available slots only on Thursday afternoons. It’s not uncommon to have to wait weeks until his next available free time. He’s completely unapologetic; he has a business to build.</p>
			<p class="x04-body-text">The task boards discussed in the process principle chapter also provide a powerful tool for implementing workload budgets. Using a task board to organize work offers two benefits in this context: it makes it easy to determine how much work each person is currently doing, and it has a structured system for how these work assignments are updated, usually in the form of a status meeting attended by everyone. Imagine you’re working on a team that uses task boards. If you’re already tackling a heavy workload, this will be immediately clear on the board—making it much harder for your team leader to overload you, especially if other people have lighter loads. In the situation where overloading you is necessary, the magnitude of what you’re being asked to do is unambiguous, meaning you’ll receive the credit due for your efforts. In a hyperactive hive mind workplace, on the other hand, where these tasks are distributed in an ad hoc manner through emails, you could easily find yourself not only overloaded, but unrecognized for this sacrifice.</p>
			<p class="x04-body-text">This latter point is critical, as it leads to inequities that are often overlooked. As I argued in the opening to chapter 5, when you run an office haphazardly, a Hobbesian dynamic arises in which those who are most brash and disagreeable get away with doing less work, while their more reasonable peers become overloaded. The late Nobel Prize–winning physicist Richard Feynman famously told an interviewer that his strategy for minimizing committee work was to do it really poorly so that people would eventually stop asking him for help. Few people would be comfortable with such brazen misanthropy. Do we really want to reward those who are?</p>
			<p class="x04-body-text">An important study on this topic, published by a research team headed by Linda Babcock of Carnegie Mellon University, documented how this dynamic disproportionately affects women. In both field and laboratory studies, the researchers found that women are more likely to volunteer for “non-promotable” service tasks than men. Women are also asked to do these tasks more frequently than men, and say yes more often when asked. “This can have serious consequences for women,” the researchers note. “If they are disproportionately saddled with work that has little visibility or impact, it will take them much longer to advance in their careers.”</p>
			<p class="x04-body-text">Shielding our eyes to how work gets allocated can make things more convenient in the moment. If I’m trying to assign a project, I’d prefer not to confront the reality of how much work my team members are already doing—I just want it done! But the convenience of this obfuscation has real costs. It stymies moves toward productivity-boosting specialization and can disproportionately punish some groups over others. When you’re forced to confront the quantitative realities of how much work is being done, casually pushing someone’s load to an extreme level becomes itself more of an extreme act. Accountability, in other words, can go a long way toward achieving reasonability when it comes to how many obligations we expect knowledge workers to handle.</p>
			<h3 class="x05-head-a">Supercharge Support</h3>
			<p class="x03-co-body-text">A key question to ask about any attempted shift toward specialization is what happens to the leftover work once everyone starts doing less? Many of these tasks will simply disappear as it becomes clear that they’re not actually that important to producing valuable output. Programmers who deploy extreme programming, for example, spend much less time in meetings and answering emails than their peers, but their companies seem to do just fine without this extra activity. A shift toward a more focused workload, however, will inevitably orphan some administrative chores that cannot be eliminated. One solution to handling this remaining work is to reverse the trend toward diminishing intellectual specialization first observed by Edward Tenner and Peter Sassone, and instead <i class="calibre5">increase</i> support staff.</p>
			<p class="x04-body-text">Most modern knowledge work organizations treat individuals as general-purpose computers that execute a turbulent mixture of value-producing and administrative tasks—often unequally distributed, and not at all optimized for any particular big picture objective. In a <i class="calibre5">specialized organization</i>, by contrast, the workforce is more bimodal, with one group focused almost exclusively on producing high-value output—like developers in an XP shop—and another group focused almost exclusively on handling all the other logistical work needed to keep the organization running. As Sassone’s research points out, hiring more support staff in this manner won’t necessarily decrease profitability. When you allow specialists to work with more focus, they produce more, and this extra value can more than compensate for the cost of maintaining dedicated support. Our rush to cut payrolls by having everyone handle their own administrative work through computer interfaces provided only the illusion of streamlining. These top-line numbers obscured the degree to which the cognitive gears that produce value in knowledge work began to grind and stick under these new demands.</p>
			<p class="x04-body-text">Returning to a culture that allows more separation between specialized and administrative work is crucial to moving past the hyperactive hive mind and significantly improving productivity. This doesn’t mean, however, that we must retreat to the lumbering <i class="calibre5">Mad Men–</i>style support setups that ruled before the office computer revolution—in which dedicated assistants sat at desks outside every office, executives dictated memos, and runners pushing mail carts and delivering coffees were ubiquitous. Technology has advanced significantly during the intervening decades to enable a much more sophisticated vision of support. As we return to a state of specialization, we should be able to supercharge the support roles that enable this shift in ways that make these roles much more efficient and satisfying for those involved.</p>
			<p class="x04-body-text">Here are some ideas for how we might accomplish this goal.</p>
			<h4 class="x05-head-b">Supercharging Idea #1: Structure Support</h4>
			<p class="x03-co-body-text">Veronica used to work as a customer service representative for a university, responsible for answering inquiries and processing orders. Her office handled all communication using email. “I would sort of go to work and ‘finish’ all my emails,” Veronica told me when I interviewed her for this book. “Sometimes I would sit in my chair for eight hours straight or more, just so I could clear my inbox.” Her work, in other words, was an exercise in overload—a constant influx of varied tasks that she struggled to tame. At the time, she explained, she thought this was just “normal work.” Like many support staff members who mainly interact with the world through an inbox, she had a hard time understanding how else her type of job could be done.</p>
			<p class="x04-body-text">Then she switched to a public sector position in the local court system. The general type of work was similar to her university role: she processed legal fees and updated case files. But the feel of the work was much different for one important reason: her new job didn’t use any electronic communication in the office. As Veronica explained, there was a custom-built case management system where information about cases was entered and updated. The communication between support staff, however, was all delivered physically. The various tasks the staff executed were each associated with a specific workflow in which specific pieces of paper would be passed from one person to another. In some cases, for legal reasons, these handoffs required signatures or extra copies to be filed to maintain a paper trail. If you had an informal question, you walked over to the relevant person and asked them.</p>
			<p class="x04-body-text">One could argue that the individual steps of these old-fashioned workflows could be made more efficient if implemented using digital networks. It seems like a waste of time to physically walk a form to someone’s office when you could instead, for example, attach a PDF to an email. But having previously worked in an office where <i class="calibre5">everything</i> transpired in the supposedly more efficient world of email, Veronica wasn’t so sure. She described the work in her new office as “transactional.” If someone needed something, they brought it to you in person, and you would deal with it right then until done. It might be literally slower to walk a form down the hall than to email it, but from a productivity perspective, Veronica didn’t feel less effective. When you’re no longer required to fragment your attention by jumping back and forth between what’s in front of you at the moment and any number of asynchronous conversations piling unpredictably in your inbox, each discrete task takes less total time.</p>
			<p class="x04-body-text">Veronica also reported other, less tangible benefits of an office without email. “Because we all interact with each other in person throughout the day, there’s more camaraderie,” she said, unlike the isolation she felt at the old job, where her days were spent staring at a screen. There’s also a great psychological benefit to avoiding inboxes full of obligations arriving faster than you can handle them. “The best result is that we do all of our work in the office,” she told me. “There is no way to bring any kind of work home.”</p>
			<p class="x04-body-text">The lesson we should extract from Veronica’s story is not that it’s smart to revert to paper-based offices. It’s instead that when it comes to support, workflows matter. Both of Veronica’s jobs involved roughly the same type of support work, but the first defaulted to the hyperactive hive mind, while the second structured the efforts more carefully. The difference was stark: the first job made Veronica feel unhappy and ineffective, while the second reversed these faults.</p>
			<p class="x04-body-text">In order to build a sustainable specialized organization, support roles need these types of structured processes. Hiring new support staff and then simply pointing them to an inbox and saying “Be useful” is a recipe for misery and high turnover. To succeed in reintroducing these roles requires more systematic workflows. The details of how these processes operate can differ significantly depending on the specific type of work. Generally speaking, however, processes should offer clarity about each step. A support staffer should not be faced with ambiguity about what to do next, as such uncertainty drains energy and can generate endless and frustrating ad hoc conversations.</p>
			<p class="x04-body-text">In addition, it’s important to remember that transactional work typically trumps concurrent efforts. If it’s possible, set up a process that allows a support staffer to work on one thing at a time until done, and to deal with issues in person (not through back-and-forth messaging). In the moment, it might seem like the ability to just fire off messages would be a real time-saver, but when everyone is doing the same thing, everyone ends up buried in an inbox, struggling to make reasonable progress on anything.</p>
			<h4 class="x05-head-b">Supercharging Idea #2: Build Smart Interfaces Between Support and Specialists</h4>
			<p class="x03-co-body-text">To help keep my Georgetown University inbox reasonable, I set up a Gmail filter to automatically move administrative announcements out of my main inbox and label them for me to review later. My process for building this filter was simple: every time an administrative message made it to my main inbox, I would add the sender’s address to my filter’s rule. I was soon overwhelmed. I currently have twenty-seven different Georgetown email addresses included in my filter—each of which is a regular source of administrative announcements. At some point, I just gave up trying to update my filter: there were simply too many different entities vying for a share of my attention.</p>
			<p class="x04-body-text">The issue at my university, which is common in most large knowledge work organizations, is that each of the support units operates more or less as a standalone entity, focused on trying to accomplish its own internal objectives as efficiently as possible. For the more than twenty-seven units that regularly send me emails, it makes perfect sense to send those messages. They have information they need to spread, and putting it in a bulk email is clearly an efficient way for them to accomplish their goal.</p>
			<p class="x04-body-text">These same issues occur when interactions go in the opposite direction. Anyone who works for a large organization is familiar with the pain of struggling with a complex and ambiguous form that a support unit requires you to fill out to request some service. Once again, when we treat each such unit as a mini standalone entity trying to accomplish its individual objectives as effectively as possible, these complex forms make sense—if support staff can get everyone to enter information in a format maximally useful to them, they’ll be able to process it more easily.</p>
			<p class="x04-body-text">The problem, of course, is that these support units aren’t standalone entities: they work within a larger organization, and their internal efficiency doesn’t necessarily impact the bottom line. In most knowledge work settings, it’s the specialists who directly produce the valuable output that sustains their organization. Given this reality, a better objective for support units would be the following: to effectively fulfill their administrative duties with <i class="calibre5">as small an impact as possible</i> on the specialists’ main work obligations. If taken seriously, this metric might mean a given support unit needs to make its own work <i class="calibre5">less</i> efficient to better serve the organization.</p>
			<p class="x04-body-text">The contact point where this idea becomes relevant is the various <i class="calibre5">interfaces</i> through which specialists interact with support staff. As underscored by my above mailing list example, if every unit is left to design these interfaces in a manner that makes its own operation easiest, soon everyone ends up deluged with more communication than they can reasonably handle. A better interface in this case might be a shared weekly newsletter that includes summaries of all relevant announcements with links to more details for those who are interested. This rule makes the operations of the support units slightly harder, as they can’t simply blast out announcements whenever they want, but the information still gets spread, and this time it’s done in a way that reduces interruption.</p>
			<p class="x04-body-text">For a more extreme example, imagine an organization in which requests for a specialist’s time and attention—such as the parking office asking them to fill out parking renewal forms, or the travel office demanding preregistration of all travel—go to some sort of <i class="calibre5">attention capital ombudsman</i> who can weed out unnecessary requests, consolidate others, and perhaps even negotiate with support units to make their requests easier to complete. This might sound absurd, but is it? Google, for example, already invests heavily in free food and subsidized dry cleaning to help its high-paid specialist developers produce more value. Against that backdrop, the cost of an ombudsman of this type might be minor relative to the additional value it would unlock.</p>
			<p class="x04-body-text">Going the other direction, one might imagine also optimizing the interfaces specialists use to contact support units, with the goal of minimizing the impact on the specialists’ time and attention. In the world of consumer interaction, there has been a push over the past decade toward what’s known as <i class="calibre5">invisible UI</i>—interfaces that are so simple and flexible that the consumer doesn’t even think of them as interfaces at all. Perhaps the most common current examples of invisible UIs are digital assistant appliances like Alexa and Google Home. Instead of requiring you to navigate through menus on a computer screen to find some information, or send a message, or play some music, you can ask out loud for what you want, and the appliance will figure out what you need. In the context of a large organization, imagine if instead of wrangling a complex web interface to request a vacation or submit a grant proposal, you could just type into a chat window what you’re trying to do, and someone will stop by your office or call you to get the additional information they need.</p>
			<p class="x04-body-text">The examples above are meant only to prompt more concrete thinking. The details of how you actually optimize these interfaces depend on your specific type of work. A more abstract way to think about this optimization is to imagine that each support unit maintains a counter that, through some magic, is able to track the total number of minutes of attention the unit has commandeered from other employees so far that week. The goal could then be simply to minimize that number as much as possible while still executing core functions. No such counters exist, of course, but this neatly captures the shift in thinking this approach to support induces.</p>
			<p class="x04-body-text">Finally, I should admit to feeling some trepidation about these concepts. An ethical pitfall in moving toward more specialization is the fear of creating a sharp divide between specialists who enjoy their work and an underclass of support professionals confined to overload. My suggestion here that support units should be willing to make their own work harder to make specialists’ work easier, in addition to being self-serving, seems to nudge our discussion toward this pitfall. With this in mind, I want to propose two defenses.</p>
			<p class="x04-body-text">First, reorienting support staff to optimize the production of specialists doesn’t necessarily need to make the work life of the former more miserable. My first idea in this section dealt with ways to introduce more structure into support processes to sidestep hyperactive hive mind overload. That idea still applies: changing your objective from making your own unit as efficient as possible to helping your organization produce as much value as possible doesn’t need to reduce the quality or sustainability of the work involved.</p>
			<p class="x04-body-text">My second defense is that whether or not we like this suggestion, it’s an economic reality. If a knowledge work organization is producing valuable cognitive output in a competitive marketplace, then it’s self-evident that having support units prioritize this output will make an organization more successful than if it instead allowed every unit to focus myopically on its own internal objectives. To be clear, no unit should be disrespected or treated as less important, and nobody should ever have to tolerate a misery-inducing work environment. But beyond these fundamental principles, it’s also true that companies aren’t democracies, and employees are not all necessarily guaranteed the same types of liberties surrounding their efforts. Put more bluntly: no knowledge work organization ever conquered a market because of the internal efficiency of its HR department.</p>
			<h4 class="x05-head-b">Supercharging Idea #3: As a Last Resort, Simulate Your Own Support Staff</h4>
			<p class="x03-co-body-text">The two preceding ideas concern the role of support staff in large knowledge work organizations. Putting these ideas into action requires that you’re in a position of power—perhaps CEO or head of a large division. If you’re instead an employee without this control, but still suffering because you don’t have enough support, you’re not entirely out of luck. In this situation, as a last-resort measure, I suggest <i class="calibre5">simulating</i> your own support staff.</p>
			<p class="x04-body-text">One way to accomplish this goal is to partition your time into two separate categories: specialist and support. For example, perhaps 12:00 to 1:00 p.m. and 3:00 to 5:00 p.m. are support hours. During all other hours, you act as if you work in a specialized organization: focus only on skilled work that directly produces value. Don’t answer administrative emails or attend administrative meetings—just work on what you do best, as if you’re an XP developer. During the support hours, by contrast, act as if you’re a full-time support staffer whose objective is to make your specialist alter ego as effective as possible. Don’t simply get lost in emails during these times, but actually follow the advice given above and put in place processes for minimizing the sense of overload you experience juggling these logistical matters. (The process principle chapter provides some specific strategies individuals can deploy toward this purpose.) You can even optimize the interfaces between these two sides of your work life by putting in place simple collection bins where your specialist self can store administrative work to be later tackled by your support self. Maybe you keep a text file for this purpose, or an actual plastic collection bin on your desk where you can drop forms, or reminders you jot down on paper (an idea originally proposed by David Allen).</p>
			<p class="x04-body-text">If you want to get more advanced, consider using two separate email addresses. I do this to some degree in my role as a professor. I have an email address for the georgetown.edu domain that was assigned to me by the university. This is where I receive all official university correspondence, and I use it, as much as possible, for administrative issues. I also have an address hosted by a server in our department for the cs.georgetown.edu domain. I use this to interact with other professors, the students and postdocs I supervise, and my research collaborators. The former address belongs to my support self; the latter to my specialist self.</p>
			<p class="x04-body-text">Another advanced tactic is to assign entire days to these roles. Perhaps Tuesday and Thursday are support days, and Monday, Wednesday, and Friday are specialist days. Not every job allows such a dramatic split in your behavior, but if yours does, there’s great clarity in such a clean division. I’ve even met practitioners of this rule who use different locations—coming into the office for support days, for example, and working from home when in their specialist role.</p>
			<p class="x04-body-text">This idea of pretending to be two different types of workers might seem heavy-handed, but there’s a surprising amount of efficiency to be gained by isolating these distinct categories of effort. As discussed in part 1, rapidly switching back and forth between support and specialist work reduces your cognitive capacity, leading to less quality work produced at a slower rate. An hour dedicated exclusively to a hard project followed by an hour dedicated exclusively to administrative work will produce more total output than if you instead mix these efforts into two hours of fragmented attention.</p>
			<hr class="transition"/>
			<div aria-hidden="true" class="x04-space-break-orn">—</div>
			<p class="x03-co-body-text">Technology helped push us down the road toward diminished specialization and increased overload. Once personal computers made it feasible for specialists to handle more support work, tackling an overwhelming number of obligations became the new norm, helping to cement the hyperactive hive mind workflow as the best option for wrangling our hectic professional lives.</p>
			<p class="x04-body-text">Reimagining work, therefore, first requires more specialization. Let the knowledge workers with value-producing skills focus on applying those skills, and put in place robust and smartly configured support staff to handle everything else. This move toward less (but better), built on a balance between specialization and support, is fundamental for the evolution of knowledge work from its current inefficient chaos toward something much more organized.</p>
		</div>
			
	<br><br/>
			<div aria-hidden="true" class="x04-space-break-orn-pb">—<a href="17_Conclusion_The_Twenty.xhtml" class="next_page"> Next Page </a>—</div>
		

</body>
</html>
